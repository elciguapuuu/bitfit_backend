
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model goals
 * 
 */
export type goals = $Result.DefaultSelection<Prisma.$goalsPayload>
/**
 * Model healthconditions
 * 
 */
export type healthconditions = $Result.DefaultSelection<Prisma.$healthconditionsPayload>
/**
 * Model recommendations
 * 
 */
export type recommendations = $Result.DefaultSelection<Prisma.$recommendationsPayload>
/**
 * Model usermetrics
 * 
 */
export type usermetrics = $Result.DefaultSelection<Prisma.$usermetricsPayload>
/**
 * Model users
 * 
 */
export type users = $Result.DefaultSelection<Prisma.$usersPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Goals
 * const goals = await prisma.goals.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Goals
   * const goals = await prisma.goals.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.goals`: Exposes CRUD operations for the **goals** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Goals
    * const goals = await prisma.goals.findMany()
    * ```
    */
  get goals(): Prisma.goalsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.healthconditions`: Exposes CRUD operations for the **healthconditions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Healthconditions
    * const healthconditions = await prisma.healthconditions.findMany()
    * ```
    */
  get healthconditions(): Prisma.healthconditionsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.recommendations`: Exposes CRUD operations for the **recommendations** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Recommendations
    * const recommendations = await prisma.recommendations.findMany()
    * ```
    */
  get recommendations(): Prisma.recommendationsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.usermetrics`: Exposes CRUD operations for the **usermetrics** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usermetrics
    * const usermetrics = await prisma.usermetrics.findMany()
    * ```
    */
  get usermetrics(): Prisma.usermetricsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.15.0
   * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    goals: 'goals',
    healthconditions: 'healthconditions',
    recommendations: 'recommendations',
    usermetrics: 'usermetrics',
    users: 'users'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "goals" | "healthconditions" | "recommendations" | "usermetrics" | "users"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      goals: {
        payload: Prisma.$goalsPayload<ExtArgs>
        fields: Prisma.goalsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.goalsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$goalsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.goalsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$goalsPayload>
          }
          findFirst: {
            args: Prisma.goalsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$goalsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.goalsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$goalsPayload>
          }
          findMany: {
            args: Prisma.goalsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$goalsPayload>[]
          }
          create: {
            args: Prisma.goalsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$goalsPayload>
          }
          createMany: {
            args: Prisma.goalsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.goalsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$goalsPayload>
          }
          update: {
            args: Prisma.goalsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$goalsPayload>
          }
          deleteMany: {
            args: Prisma.goalsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.goalsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.goalsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$goalsPayload>
          }
          aggregate: {
            args: Prisma.GoalsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGoals>
          }
          groupBy: {
            args: Prisma.goalsGroupByArgs<ExtArgs>
            result: $Utils.Optional<GoalsGroupByOutputType>[]
          }
          count: {
            args: Prisma.goalsCountArgs<ExtArgs>
            result: $Utils.Optional<GoalsCountAggregateOutputType> | number
          }
        }
      }
      healthconditions: {
        payload: Prisma.$healthconditionsPayload<ExtArgs>
        fields: Prisma.healthconditionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.healthconditionsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$healthconditionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.healthconditionsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$healthconditionsPayload>
          }
          findFirst: {
            args: Prisma.healthconditionsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$healthconditionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.healthconditionsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$healthconditionsPayload>
          }
          findMany: {
            args: Prisma.healthconditionsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$healthconditionsPayload>[]
          }
          create: {
            args: Prisma.healthconditionsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$healthconditionsPayload>
          }
          createMany: {
            args: Prisma.healthconditionsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.healthconditionsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$healthconditionsPayload>
          }
          update: {
            args: Prisma.healthconditionsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$healthconditionsPayload>
          }
          deleteMany: {
            args: Prisma.healthconditionsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.healthconditionsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.healthconditionsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$healthconditionsPayload>
          }
          aggregate: {
            args: Prisma.HealthconditionsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHealthconditions>
          }
          groupBy: {
            args: Prisma.healthconditionsGroupByArgs<ExtArgs>
            result: $Utils.Optional<HealthconditionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.healthconditionsCountArgs<ExtArgs>
            result: $Utils.Optional<HealthconditionsCountAggregateOutputType> | number
          }
        }
      }
      recommendations: {
        payload: Prisma.$recommendationsPayload<ExtArgs>
        fields: Prisma.recommendationsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.recommendationsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$recommendationsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.recommendationsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$recommendationsPayload>
          }
          findFirst: {
            args: Prisma.recommendationsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$recommendationsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.recommendationsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$recommendationsPayload>
          }
          findMany: {
            args: Prisma.recommendationsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$recommendationsPayload>[]
          }
          create: {
            args: Prisma.recommendationsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$recommendationsPayload>
          }
          createMany: {
            args: Prisma.recommendationsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.recommendationsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$recommendationsPayload>
          }
          update: {
            args: Prisma.recommendationsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$recommendationsPayload>
          }
          deleteMany: {
            args: Prisma.recommendationsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.recommendationsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.recommendationsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$recommendationsPayload>
          }
          aggregate: {
            args: Prisma.RecommendationsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRecommendations>
          }
          groupBy: {
            args: Prisma.recommendationsGroupByArgs<ExtArgs>
            result: $Utils.Optional<RecommendationsGroupByOutputType>[]
          }
          count: {
            args: Prisma.recommendationsCountArgs<ExtArgs>
            result: $Utils.Optional<RecommendationsCountAggregateOutputType> | number
          }
        }
      }
      usermetrics: {
        payload: Prisma.$usermetricsPayload<ExtArgs>
        fields: Prisma.usermetricsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usermetricsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usermetricsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usermetricsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usermetricsPayload>
          }
          findFirst: {
            args: Prisma.usermetricsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usermetricsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usermetricsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usermetricsPayload>
          }
          findMany: {
            args: Prisma.usermetricsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usermetricsPayload>[]
          }
          create: {
            args: Prisma.usermetricsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usermetricsPayload>
          }
          createMany: {
            args: Prisma.usermetricsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.usermetricsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usermetricsPayload>
          }
          update: {
            args: Prisma.usermetricsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usermetricsPayload>
          }
          deleteMany: {
            args: Prisma.usermetricsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.usermetricsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.usermetricsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usermetricsPayload>
          }
          aggregate: {
            args: Prisma.UsermetricsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsermetrics>
          }
          groupBy: {
            args: Prisma.usermetricsGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsermetricsGroupByOutputType>[]
          }
          count: {
            args: Prisma.usermetricsCountArgs<ExtArgs>
            result: $Utils.Optional<UsermetricsCountAggregateOutputType> | number
          }
        }
      }
      users: {
        payload: Prisma.$usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    goals?: goalsOmit
    healthconditions?: healthconditionsOmit
    recommendations?: recommendationsOmit
    usermetrics?: usermetricsOmit
    users?: usersOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    goals: number
    healthconditions: number
    recommendations: number
    usermetrics: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    goals?: boolean | UsersCountOutputTypeCountGoalsArgs
    healthconditions?: boolean | UsersCountOutputTypeCountHealthconditionsArgs
    recommendations?: boolean | UsersCountOutputTypeCountRecommendationsArgs
    usermetrics?: boolean | UsersCountOutputTypeCountUsermetricsArgs
  }

  // Custom InputTypes
  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountGoalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: goalsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountHealthconditionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: healthconditionsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountRecommendationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: recommendationsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountUsermetricsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usermetricsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model goals
   */

  export type AggregateGoals = {
    _count: GoalsCountAggregateOutputType | null
    _avg: GoalsAvgAggregateOutputType | null
    _sum: GoalsSumAggregateOutputType | null
    _min: GoalsMinAggregateOutputType | null
    _max: GoalsMaxAggregateOutputType | null
  }

  export type GoalsAvgAggregateOutputType = {
    goal_id: number | null
    user_id: number | null
    target_weight: Decimal | null
  }

  export type GoalsSumAggregateOutputType = {
    goal_id: number | null
    user_id: number | null
    target_weight: Decimal | null
  }

  export type GoalsMinAggregateOutputType = {
    goal_id: number | null
    user_id: number | null
    goal_type: string | null
    target_weight: Decimal | null
    target_date: Date | null
    created_at: Date | null
  }

  export type GoalsMaxAggregateOutputType = {
    goal_id: number | null
    user_id: number | null
    goal_type: string | null
    target_weight: Decimal | null
    target_date: Date | null
    created_at: Date | null
  }

  export type GoalsCountAggregateOutputType = {
    goal_id: number
    user_id: number
    goal_type: number
    target_weight: number
    target_date: number
    created_at: number
    _all: number
  }


  export type GoalsAvgAggregateInputType = {
    goal_id?: true
    user_id?: true
    target_weight?: true
  }

  export type GoalsSumAggregateInputType = {
    goal_id?: true
    user_id?: true
    target_weight?: true
  }

  export type GoalsMinAggregateInputType = {
    goal_id?: true
    user_id?: true
    goal_type?: true
    target_weight?: true
    target_date?: true
    created_at?: true
  }

  export type GoalsMaxAggregateInputType = {
    goal_id?: true
    user_id?: true
    goal_type?: true
    target_weight?: true
    target_date?: true
    created_at?: true
  }

  export type GoalsCountAggregateInputType = {
    goal_id?: true
    user_id?: true
    goal_type?: true
    target_weight?: true
    target_date?: true
    created_at?: true
    _all?: true
  }

  export type GoalsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which goals to aggregate.
     */
    where?: goalsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of goals to fetch.
     */
    orderBy?: goalsOrderByWithRelationInput | goalsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: goalsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` goals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned goals
    **/
    _count?: true | GoalsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GoalsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GoalsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GoalsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GoalsMaxAggregateInputType
  }

  export type GetGoalsAggregateType<T extends GoalsAggregateArgs> = {
        [P in keyof T & keyof AggregateGoals]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGoals[P]>
      : GetScalarType<T[P], AggregateGoals[P]>
  }




  export type goalsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: goalsWhereInput
    orderBy?: goalsOrderByWithAggregationInput | goalsOrderByWithAggregationInput[]
    by: GoalsScalarFieldEnum[] | GoalsScalarFieldEnum
    having?: goalsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GoalsCountAggregateInputType | true
    _avg?: GoalsAvgAggregateInputType
    _sum?: GoalsSumAggregateInputType
    _min?: GoalsMinAggregateInputType
    _max?: GoalsMaxAggregateInputType
  }

  export type GoalsGroupByOutputType = {
    goal_id: number
    user_id: number | null
    goal_type: string | null
    target_weight: Decimal | null
    target_date: Date | null
    created_at: Date | null
    _count: GoalsCountAggregateOutputType | null
    _avg: GoalsAvgAggregateOutputType | null
    _sum: GoalsSumAggregateOutputType | null
    _min: GoalsMinAggregateOutputType | null
    _max: GoalsMaxAggregateOutputType | null
  }

  type GetGoalsGroupByPayload<T extends goalsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GoalsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GoalsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GoalsGroupByOutputType[P]>
            : GetScalarType<T[P], GoalsGroupByOutputType[P]>
        }
      >
    >


  export type goalsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    goal_id?: boolean
    user_id?: boolean
    goal_type?: boolean
    target_weight?: boolean
    target_date?: boolean
    created_at?: boolean
    users?: boolean | goals$usersArgs<ExtArgs>
  }, ExtArgs["result"]["goals"]>



  export type goalsSelectScalar = {
    goal_id?: boolean
    user_id?: boolean
    goal_type?: boolean
    target_weight?: boolean
    target_date?: boolean
    created_at?: boolean
  }

  export type goalsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"goal_id" | "user_id" | "goal_type" | "target_weight" | "target_date" | "created_at", ExtArgs["result"]["goals"]>
  export type goalsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | goals$usersArgs<ExtArgs>
  }

  export type $goalsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "goals"
    objects: {
      users: Prisma.$usersPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      goal_id: number
      user_id: number | null
      goal_type: string | null
      target_weight: Prisma.Decimal | null
      target_date: Date | null
      created_at: Date | null
    }, ExtArgs["result"]["goals"]>
    composites: {}
  }

  type goalsGetPayload<S extends boolean | null | undefined | goalsDefaultArgs> = $Result.GetResult<Prisma.$goalsPayload, S>

  type goalsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<goalsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GoalsCountAggregateInputType | true
    }

  export interface goalsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['goals'], meta: { name: 'goals' } }
    /**
     * Find zero or one Goals that matches the filter.
     * @param {goalsFindUniqueArgs} args - Arguments to find a Goals
     * @example
     * // Get one Goals
     * const goals = await prisma.goals.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends goalsFindUniqueArgs>(args: SelectSubset<T, goalsFindUniqueArgs<ExtArgs>>): Prisma__goalsClient<$Result.GetResult<Prisma.$goalsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Goals that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {goalsFindUniqueOrThrowArgs} args - Arguments to find a Goals
     * @example
     * // Get one Goals
     * const goals = await prisma.goals.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends goalsFindUniqueOrThrowArgs>(args: SelectSubset<T, goalsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__goalsClient<$Result.GetResult<Prisma.$goalsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Goals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {goalsFindFirstArgs} args - Arguments to find a Goals
     * @example
     * // Get one Goals
     * const goals = await prisma.goals.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends goalsFindFirstArgs>(args?: SelectSubset<T, goalsFindFirstArgs<ExtArgs>>): Prisma__goalsClient<$Result.GetResult<Prisma.$goalsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Goals that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {goalsFindFirstOrThrowArgs} args - Arguments to find a Goals
     * @example
     * // Get one Goals
     * const goals = await prisma.goals.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends goalsFindFirstOrThrowArgs>(args?: SelectSubset<T, goalsFindFirstOrThrowArgs<ExtArgs>>): Prisma__goalsClient<$Result.GetResult<Prisma.$goalsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Goals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {goalsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Goals
     * const goals = await prisma.goals.findMany()
     * 
     * // Get first 10 Goals
     * const goals = await prisma.goals.findMany({ take: 10 })
     * 
     * // Only select the `goal_id`
     * const goalsWithGoal_idOnly = await prisma.goals.findMany({ select: { goal_id: true } })
     * 
     */
    findMany<T extends goalsFindManyArgs>(args?: SelectSubset<T, goalsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$goalsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Goals.
     * @param {goalsCreateArgs} args - Arguments to create a Goals.
     * @example
     * // Create one Goals
     * const Goals = await prisma.goals.create({
     *   data: {
     *     // ... data to create a Goals
     *   }
     * })
     * 
     */
    create<T extends goalsCreateArgs>(args: SelectSubset<T, goalsCreateArgs<ExtArgs>>): Prisma__goalsClient<$Result.GetResult<Prisma.$goalsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Goals.
     * @param {goalsCreateManyArgs} args - Arguments to create many Goals.
     * @example
     * // Create many Goals
     * const goals = await prisma.goals.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends goalsCreateManyArgs>(args?: SelectSubset<T, goalsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Goals.
     * @param {goalsDeleteArgs} args - Arguments to delete one Goals.
     * @example
     * // Delete one Goals
     * const Goals = await prisma.goals.delete({
     *   where: {
     *     // ... filter to delete one Goals
     *   }
     * })
     * 
     */
    delete<T extends goalsDeleteArgs>(args: SelectSubset<T, goalsDeleteArgs<ExtArgs>>): Prisma__goalsClient<$Result.GetResult<Prisma.$goalsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Goals.
     * @param {goalsUpdateArgs} args - Arguments to update one Goals.
     * @example
     * // Update one Goals
     * const goals = await prisma.goals.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends goalsUpdateArgs>(args: SelectSubset<T, goalsUpdateArgs<ExtArgs>>): Prisma__goalsClient<$Result.GetResult<Prisma.$goalsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Goals.
     * @param {goalsDeleteManyArgs} args - Arguments to filter Goals to delete.
     * @example
     * // Delete a few Goals
     * const { count } = await prisma.goals.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends goalsDeleteManyArgs>(args?: SelectSubset<T, goalsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Goals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {goalsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Goals
     * const goals = await prisma.goals.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends goalsUpdateManyArgs>(args: SelectSubset<T, goalsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Goals.
     * @param {goalsUpsertArgs} args - Arguments to update or create a Goals.
     * @example
     * // Update or create a Goals
     * const goals = await prisma.goals.upsert({
     *   create: {
     *     // ... data to create a Goals
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Goals we want to update
     *   }
     * })
     */
    upsert<T extends goalsUpsertArgs>(args: SelectSubset<T, goalsUpsertArgs<ExtArgs>>): Prisma__goalsClient<$Result.GetResult<Prisma.$goalsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Goals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {goalsCountArgs} args - Arguments to filter Goals to count.
     * @example
     * // Count the number of Goals
     * const count = await prisma.goals.count({
     *   where: {
     *     // ... the filter for the Goals we want to count
     *   }
     * })
    **/
    count<T extends goalsCountArgs>(
      args?: Subset<T, goalsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GoalsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Goals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GoalsAggregateArgs>(args: Subset<T, GoalsAggregateArgs>): Prisma.PrismaPromise<GetGoalsAggregateType<T>>

    /**
     * Group by Goals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {goalsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends goalsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: goalsGroupByArgs['orderBy'] }
        : { orderBy?: goalsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, goalsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGoalsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the goals model
   */
  readonly fields: goalsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for goals.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__goalsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends goals$usersArgs<ExtArgs> = {}>(args?: Subset<T, goals$usersArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the goals model
   */
  interface goalsFieldRefs {
    readonly goal_id: FieldRef<"goals", 'Int'>
    readonly user_id: FieldRef<"goals", 'Int'>
    readonly goal_type: FieldRef<"goals", 'String'>
    readonly target_weight: FieldRef<"goals", 'Decimal'>
    readonly target_date: FieldRef<"goals", 'DateTime'>
    readonly created_at: FieldRef<"goals", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * goals findUnique
   */
  export type goalsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the goals
     */
    select?: goalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the goals
     */
    omit?: goalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: goalsInclude<ExtArgs> | null
    /**
     * Filter, which goals to fetch.
     */
    where: goalsWhereUniqueInput
  }

  /**
   * goals findUniqueOrThrow
   */
  export type goalsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the goals
     */
    select?: goalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the goals
     */
    omit?: goalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: goalsInclude<ExtArgs> | null
    /**
     * Filter, which goals to fetch.
     */
    where: goalsWhereUniqueInput
  }

  /**
   * goals findFirst
   */
  export type goalsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the goals
     */
    select?: goalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the goals
     */
    omit?: goalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: goalsInclude<ExtArgs> | null
    /**
     * Filter, which goals to fetch.
     */
    where?: goalsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of goals to fetch.
     */
    orderBy?: goalsOrderByWithRelationInput | goalsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for goals.
     */
    cursor?: goalsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` goals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of goals.
     */
    distinct?: GoalsScalarFieldEnum | GoalsScalarFieldEnum[]
  }

  /**
   * goals findFirstOrThrow
   */
  export type goalsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the goals
     */
    select?: goalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the goals
     */
    omit?: goalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: goalsInclude<ExtArgs> | null
    /**
     * Filter, which goals to fetch.
     */
    where?: goalsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of goals to fetch.
     */
    orderBy?: goalsOrderByWithRelationInput | goalsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for goals.
     */
    cursor?: goalsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` goals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of goals.
     */
    distinct?: GoalsScalarFieldEnum | GoalsScalarFieldEnum[]
  }

  /**
   * goals findMany
   */
  export type goalsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the goals
     */
    select?: goalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the goals
     */
    omit?: goalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: goalsInclude<ExtArgs> | null
    /**
     * Filter, which goals to fetch.
     */
    where?: goalsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of goals to fetch.
     */
    orderBy?: goalsOrderByWithRelationInput | goalsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing goals.
     */
    cursor?: goalsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` goals.
     */
    skip?: number
    distinct?: GoalsScalarFieldEnum | GoalsScalarFieldEnum[]
  }

  /**
   * goals create
   */
  export type goalsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the goals
     */
    select?: goalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the goals
     */
    omit?: goalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: goalsInclude<ExtArgs> | null
    /**
     * The data needed to create a goals.
     */
    data?: XOR<goalsCreateInput, goalsUncheckedCreateInput>
  }

  /**
   * goals createMany
   */
  export type goalsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many goals.
     */
    data: goalsCreateManyInput | goalsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * goals update
   */
  export type goalsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the goals
     */
    select?: goalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the goals
     */
    omit?: goalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: goalsInclude<ExtArgs> | null
    /**
     * The data needed to update a goals.
     */
    data: XOR<goalsUpdateInput, goalsUncheckedUpdateInput>
    /**
     * Choose, which goals to update.
     */
    where: goalsWhereUniqueInput
  }

  /**
   * goals updateMany
   */
  export type goalsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update goals.
     */
    data: XOR<goalsUpdateManyMutationInput, goalsUncheckedUpdateManyInput>
    /**
     * Filter which goals to update
     */
    where?: goalsWhereInput
    /**
     * Limit how many goals to update.
     */
    limit?: number
  }

  /**
   * goals upsert
   */
  export type goalsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the goals
     */
    select?: goalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the goals
     */
    omit?: goalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: goalsInclude<ExtArgs> | null
    /**
     * The filter to search for the goals to update in case it exists.
     */
    where: goalsWhereUniqueInput
    /**
     * In case the goals found by the `where` argument doesn't exist, create a new goals with this data.
     */
    create: XOR<goalsCreateInput, goalsUncheckedCreateInput>
    /**
     * In case the goals was found with the provided `where` argument, update it with this data.
     */
    update: XOR<goalsUpdateInput, goalsUncheckedUpdateInput>
  }

  /**
   * goals delete
   */
  export type goalsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the goals
     */
    select?: goalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the goals
     */
    omit?: goalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: goalsInclude<ExtArgs> | null
    /**
     * Filter which goals to delete.
     */
    where: goalsWhereUniqueInput
  }

  /**
   * goals deleteMany
   */
  export type goalsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which goals to delete
     */
    where?: goalsWhereInput
    /**
     * Limit how many goals to delete.
     */
    limit?: number
  }

  /**
   * goals.users
   */
  export type goals$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }

  /**
   * goals without action
   */
  export type goalsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the goals
     */
    select?: goalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the goals
     */
    omit?: goalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: goalsInclude<ExtArgs> | null
  }


  /**
   * Model healthconditions
   */

  export type AggregateHealthconditions = {
    _count: HealthconditionsCountAggregateOutputType | null
    _avg: HealthconditionsAvgAggregateOutputType | null
    _sum: HealthconditionsSumAggregateOutputType | null
    _min: HealthconditionsMinAggregateOutputType | null
    _max: HealthconditionsMaxAggregateOutputType | null
  }

  export type HealthconditionsAvgAggregateOutputType = {
    condition_id: number | null
    user_id: number | null
  }

  export type HealthconditionsSumAggregateOutputType = {
    condition_id: number | null
    user_id: number | null
  }

  export type HealthconditionsMinAggregateOutputType = {
    condition_id: number | null
    user_id: number | null
    condition_name: string | null
    severity: string | null
    diagnosed_at: Date | null
  }

  export type HealthconditionsMaxAggregateOutputType = {
    condition_id: number | null
    user_id: number | null
    condition_name: string | null
    severity: string | null
    diagnosed_at: Date | null
  }

  export type HealthconditionsCountAggregateOutputType = {
    condition_id: number
    user_id: number
    condition_name: number
    severity: number
    diagnosed_at: number
    _all: number
  }


  export type HealthconditionsAvgAggregateInputType = {
    condition_id?: true
    user_id?: true
  }

  export type HealthconditionsSumAggregateInputType = {
    condition_id?: true
    user_id?: true
  }

  export type HealthconditionsMinAggregateInputType = {
    condition_id?: true
    user_id?: true
    condition_name?: true
    severity?: true
    diagnosed_at?: true
  }

  export type HealthconditionsMaxAggregateInputType = {
    condition_id?: true
    user_id?: true
    condition_name?: true
    severity?: true
    diagnosed_at?: true
  }

  export type HealthconditionsCountAggregateInputType = {
    condition_id?: true
    user_id?: true
    condition_name?: true
    severity?: true
    diagnosed_at?: true
    _all?: true
  }

  export type HealthconditionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which healthconditions to aggregate.
     */
    where?: healthconditionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of healthconditions to fetch.
     */
    orderBy?: healthconditionsOrderByWithRelationInput | healthconditionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: healthconditionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` healthconditions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` healthconditions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned healthconditions
    **/
    _count?: true | HealthconditionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HealthconditionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HealthconditionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HealthconditionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HealthconditionsMaxAggregateInputType
  }

  export type GetHealthconditionsAggregateType<T extends HealthconditionsAggregateArgs> = {
        [P in keyof T & keyof AggregateHealthconditions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHealthconditions[P]>
      : GetScalarType<T[P], AggregateHealthconditions[P]>
  }




  export type healthconditionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: healthconditionsWhereInput
    orderBy?: healthconditionsOrderByWithAggregationInput | healthconditionsOrderByWithAggregationInput[]
    by: HealthconditionsScalarFieldEnum[] | HealthconditionsScalarFieldEnum
    having?: healthconditionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HealthconditionsCountAggregateInputType | true
    _avg?: HealthconditionsAvgAggregateInputType
    _sum?: HealthconditionsSumAggregateInputType
    _min?: HealthconditionsMinAggregateInputType
    _max?: HealthconditionsMaxAggregateInputType
  }

  export type HealthconditionsGroupByOutputType = {
    condition_id: number
    user_id: number | null
    condition_name: string | null
    severity: string | null
    diagnosed_at: Date | null
    _count: HealthconditionsCountAggregateOutputType | null
    _avg: HealthconditionsAvgAggregateOutputType | null
    _sum: HealthconditionsSumAggregateOutputType | null
    _min: HealthconditionsMinAggregateOutputType | null
    _max: HealthconditionsMaxAggregateOutputType | null
  }

  type GetHealthconditionsGroupByPayload<T extends healthconditionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HealthconditionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HealthconditionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HealthconditionsGroupByOutputType[P]>
            : GetScalarType<T[P], HealthconditionsGroupByOutputType[P]>
        }
      >
    >


  export type healthconditionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    condition_id?: boolean
    user_id?: boolean
    condition_name?: boolean
    severity?: boolean
    diagnosed_at?: boolean
    users?: boolean | healthconditions$usersArgs<ExtArgs>
  }, ExtArgs["result"]["healthconditions"]>



  export type healthconditionsSelectScalar = {
    condition_id?: boolean
    user_id?: boolean
    condition_name?: boolean
    severity?: boolean
    diagnosed_at?: boolean
  }

  export type healthconditionsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"condition_id" | "user_id" | "condition_name" | "severity" | "diagnosed_at", ExtArgs["result"]["healthconditions"]>
  export type healthconditionsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | healthconditions$usersArgs<ExtArgs>
  }

  export type $healthconditionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "healthconditions"
    objects: {
      users: Prisma.$usersPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      condition_id: number
      user_id: number | null
      condition_name: string | null
      severity: string | null
      diagnosed_at: Date | null
    }, ExtArgs["result"]["healthconditions"]>
    composites: {}
  }

  type healthconditionsGetPayload<S extends boolean | null | undefined | healthconditionsDefaultArgs> = $Result.GetResult<Prisma.$healthconditionsPayload, S>

  type healthconditionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<healthconditionsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HealthconditionsCountAggregateInputType | true
    }

  export interface healthconditionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['healthconditions'], meta: { name: 'healthconditions' } }
    /**
     * Find zero or one Healthconditions that matches the filter.
     * @param {healthconditionsFindUniqueArgs} args - Arguments to find a Healthconditions
     * @example
     * // Get one Healthconditions
     * const healthconditions = await prisma.healthconditions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends healthconditionsFindUniqueArgs>(args: SelectSubset<T, healthconditionsFindUniqueArgs<ExtArgs>>): Prisma__healthconditionsClient<$Result.GetResult<Prisma.$healthconditionsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Healthconditions that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {healthconditionsFindUniqueOrThrowArgs} args - Arguments to find a Healthconditions
     * @example
     * // Get one Healthconditions
     * const healthconditions = await prisma.healthconditions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends healthconditionsFindUniqueOrThrowArgs>(args: SelectSubset<T, healthconditionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__healthconditionsClient<$Result.GetResult<Prisma.$healthconditionsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Healthconditions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {healthconditionsFindFirstArgs} args - Arguments to find a Healthconditions
     * @example
     * // Get one Healthconditions
     * const healthconditions = await prisma.healthconditions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends healthconditionsFindFirstArgs>(args?: SelectSubset<T, healthconditionsFindFirstArgs<ExtArgs>>): Prisma__healthconditionsClient<$Result.GetResult<Prisma.$healthconditionsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Healthconditions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {healthconditionsFindFirstOrThrowArgs} args - Arguments to find a Healthconditions
     * @example
     * // Get one Healthconditions
     * const healthconditions = await prisma.healthconditions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends healthconditionsFindFirstOrThrowArgs>(args?: SelectSubset<T, healthconditionsFindFirstOrThrowArgs<ExtArgs>>): Prisma__healthconditionsClient<$Result.GetResult<Prisma.$healthconditionsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Healthconditions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {healthconditionsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Healthconditions
     * const healthconditions = await prisma.healthconditions.findMany()
     * 
     * // Get first 10 Healthconditions
     * const healthconditions = await prisma.healthconditions.findMany({ take: 10 })
     * 
     * // Only select the `condition_id`
     * const healthconditionsWithCondition_idOnly = await prisma.healthconditions.findMany({ select: { condition_id: true } })
     * 
     */
    findMany<T extends healthconditionsFindManyArgs>(args?: SelectSubset<T, healthconditionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$healthconditionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Healthconditions.
     * @param {healthconditionsCreateArgs} args - Arguments to create a Healthconditions.
     * @example
     * // Create one Healthconditions
     * const Healthconditions = await prisma.healthconditions.create({
     *   data: {
     *     // ... data to create a Healthconditions
     *   }
     * })
     * 
     */
    create<T extends healthconditionsCreateArgs>(args: SelectSubset<T, healthconditionsCreateArgs<ExtArgs>>): Prisma__healthconditionsClient<$Result.GetResult<Prisma.$healthconditionsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Healthconditions.
     * @param {healthconditionsCreateManyArgs} args - Arguments to create many Healthconditions.
     * @example
     * // Create many Healthconditions
     * const healthconditions = await prisma.healthconditions.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends healthconditionsCreateManyArgs>(args?: SelectSubset<T, healthconditionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Healthconditions.
     * @param {healthconditionsDeleteArgs} args - Arguments to delete one Healthconditions.
     * @example
     * // Delete one Healthconditions
     * const Healthconditions = await prisma.healthconditions.delete({
     *   where: {
     *     // ... filter to delete one Healthconditions
     *   }
     * })
     * 
     */
    delete<T extends healthconditionsDeleteArgs>(args: SelectSubset<T, healthconditionsDeleteArgs<ExtArgs>>): Prisma__healthconditionsClient<$Result.GetResult<Prisma.$healthconditionsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Healthconditions.
     * @param {healthconditionsUpdateArgs} args - Arguments to update one Healthconditions.
     * @example
     * // Update one Healthconditions
     * const healthconditions = await prisma.healthconditions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends healthconditionsUpdateArgs>(args: SelectSubset<T, healthconditionsUpdateArgs<ExtArgs>>): Prisma__healthconditionsClient<$Result.GetResult<Prisma.$healthconditionsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Healthconditions.
     * @param {healthconditionsDeleteManyArgs} args - Arguments to filter Healthconditions to delete.
     * @example
     * // Delete a few Healthconditions
     * const { count } = await prisma.healthconditions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends healthconditionsDeleteManyArgs>(args?: SelectSubset<T, healthconditionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Healthconditions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {healthconditionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Healthconditions
     * const healthconditions = await prisma.healthconditions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends healthconditionsUpdateManyArgs>(args: SelectSubset<T, healthconditionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Healthconditions.
     * @param {healthconditionsUpsertArgs} args - Arguments to update or create a Healthconditions.
     * @example
     * // Update or create a Healthconditions
     * const healthconditions = await prisma.healthconditions.upsert({
     *   create: {
     *     // ... data to create a Healthconditions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Healthconditions we want to update
     *   }
     * })
     */
    upsert<T extends healthconditionsUpsertArgs>(args: SelectSubset<T, healthconditionsUpsertArgs<ExtArgs>>): Prisma__healthconditionsClient<$Result.GetResult<Prisma.$healthconditionsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Healthconditions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {healthconditionsCountArgs} args - Arguments to filter Healthconditions to count.
     * @example
     * // Count the number of Healthconditions
     * const count = await prisma.healthconditions.count({
     *   where: {
     *     // ... the filter for the Healthconditions we want to count
     *   }
     * })
    **/
    count<T extends healthconditionsCountArgs>(
      args?: Subset<T, healthconditionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HealthconditionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Healthconditions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthconditionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HealthconditionsAggregateArgs>(args: Subset<T, HealthconditionsAggregateArgs>): Prisma.PrismaPromise<GetHealthconditionsAggregateType<T>>

    /**
     * Group by Healthconditions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {healthconditionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends healthconditionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: healthconditionsGroupByArgs['orderBy'] }
        : { orderBy?: healthconditionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, healthconditionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHealthconditionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the healthconditions model
   */
  readonly fields: healthconditionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for healthconditions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__healthconditionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends healthconditions$usersArgs<ExtArgs> = {}>(args?: Subset<T, healthconditions$usersArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the healthconditions model
   */
  interface healthconditionsFieldRefs {
    readonly condition_id: FieldRef<"healthconditions", 'Int'>
    readonly user_id: FieldRef<"healthconditions", 'Int'>
    readonly condition_name: FieldRef<"healthconditions", 'String'>
    readonly severity: FieldRef<"healthconditions", 'String'>
    readonly diagnosed_at: FieldRef<"healthconditions", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * healthconditions findUnique
   */
  export type healthconditionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the healthconditions
     */
    select?: healthconditionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the healthconditions
     */
    omit?: healthconditionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: healthconditionsInclude<ExtArgs> | null
    /**
     * Filter, which healthconditions to fetch.
     */
    where: healthconditionsWhereUniqueInput
  }

  /**
   * healthconditions findUniqueOrThrow
   */
  export type healthconditionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the healthconditions
     */
    select?: healthconditionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the healthconditions
     */
    omit?: healthconditionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: healthconditionsInclude<ExtArgs> | null
    /**
     * Filter, which healthconditions to fetch.
     */
    where: healthconditionsWhereUniqueInput
  }

  /**
   * healthconditions findFirst
   */
  export type healthconditionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the healthconditions
     */
    select?: healthconditionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the healthconditions
     */
    omit?: healthconditionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: healthconditionsInclude<ExtArgs> | null
    /**
     * Filter, which healthconditions to fetch.
     */
    where?: healthconditionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of healthconditions to fetch.
     */
    orderBy?: healthconditionsOrderByWithRelationInput | healthconditionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for healthconditions.
     */
    cursor?: healthconditionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` healthconditions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` healthconditions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of healthconditions.
     */
    distinct?: HealthconditionsScalarFieldEnum | HealthconditionsScalarFieldEnum[]
  }

  /**
   * healthconditions findFirstOrThrow
   */
  export type healthconditionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the healthconditions
     */
    select?: healthconditionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the healthconditions
     */
    omit?: healthconditionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: healthconditionsInclude<ExtArgs> | null
    /**
     * Filter, which healthconditions to fetch.
     */
    where?: healthconditionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of healthconditions to fetch.
     */
    orderBy?: healthconditionsOrderByWithRelationInput | healthconditionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for healthconditions.
     */
    cursor?: healthconditionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` healthconditions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` healthconditions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of healthconditions.
     */
    distinct?: HealthconditionsScalarFieldEnum | HealthconditionsScalarFieldEnum[]
  }

  /**
   * healthconditions findMany
   */
  export type healthconditionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the healthconditions
     */
    select?: healthconditionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the healthconditions
     */
    omit?: healthconditionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: healthconditionsInclude<ExtArgs> | null
    /**
     * Filter, which healthconditions to fetch.
     */
    where?: healthconditionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of healthconditions to fetch.
     */
    orderBy?: healthconditionsOrderByWithRelationInput | healthconditionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing healthconditions.
     */
    cursor?: healthconditionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` healthconditions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` healthconditions.
     */
    skip?: number
    distinct?: HealthconditionsScalarFieldEnum | HealthconditionsScalarFieldEnum[]
  }

  /**
   * healthconditions create
   */
  export type healthconditionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the healthconditions
     */
    select?: healthconditionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the healthconditions
     */
    omit?: healthconditionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: healthconditionsInclude<ExtArgs> | null
    /**
     * The data needed to create a healthconditions.
     */
    data?: XOR<healthconditionsCreateInput, healthconditionsUncheckedCreateInput>
  }

  /**
   * healthconditions createMany
   */
  export type healthconditionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many healthconditions.
     */
    data: healthconditionsCreateManyInput | healthconditionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * healthconditions update
   */
  export type healthconditionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the healthconditions
     */
    select?: healthconditionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the healthconditions
     */
    omit?: healthconditionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: healthconditionsInclude<ExtArgs> | null
    /**
     * The data needed to update a healthconditions.
     */
    data: XOR<healthconditionsUpdateInput, healthconditionsUncheckedUpdateInput>
    /**
     * Choose, which healthconditions to update.
     */
    where: healthconditionsWhereUniqueInput
  }

  /**
   * healthconditions updateMany
   */
  export type healthconditionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update healthconditions.
     */
    data: XOR<healthconditionsUpdateManyMutationInput, healthconditionsUncheckedUpdateManyInput>
    /**
     * Filter which healthconditions to update
     */
    where?: healthconditionsWhereInput
    /**
     * Limit how many healthconditions to update.
     */
    limit?: number
  }

  /**
   * healthconditions upsert
   */
  export type healthconditionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the healthconditions
     */
    select?: healthconditionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the healthconditions
     */
    omit?: healthconditionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: healthconditionsInclude<ExtArgs> | null
    /**
     * The filter to search for the healthconditions to update in case it exists.
     */
    where: healthconditionsWhereUniqueInput
    /**
     * In case the healthconditions found by the `where` argument doesn't exist, create a new healthconditions with this data.
     */
    create: XOR<healthconditionsCreateInput, healthconditionsUncheckedCreateInput>
    /**
     * In case the healthconditions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<healthconditionsUpdateInput, healthconditionsUncheckedUpdateInput>
  }

  /**
   * healthconditions delete
   */
  export type healthconditionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the healthconditions
     */
    select?: healthconditionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the healthconditions
     */
    omit?: healthconditionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: healthconditionsInclude<ExtArgs> | null
    /**
     * Filter which healthconditions to delete.
     */
    where: healthconditionsWhereUniqueInput
  }

  /**
   * healthconditions deleteMany
   */
  export type healthconditionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which healthconditions to delete
     */
    where?: healthconditionsWhereInput
    /**
     * Limit how many healthconditions to delete.
     */
    limit?: number
  }

  /**
   * healthconditions.users
   */
  export type healthconditions$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }

  /**
   * healthconditions without action
   */
  export type healthconditionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the healthconditions
     */
    select?: healthconditionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the healthconditions
     */
    omit?: healthconditionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: healthconditionsInclude<ExtArgs> | null
  }


  /**
   * Model recommendations
   */

  export type AggregateRecommendations = {
    _count: RecommendationsCountAggregateOutputType | null
    _avg: RecommendationsAvgAggregateOutputType | null
    _sum: RecommendationsSumAggregateOutputType | null
    _min: RecommendationsMinAggregateOutputType | null
    _max: RecommendationsMaxAggregateOutputType | null
  }

  export type RecommendationsAvgAggregateOutputType = {
    rec_id: number | null
    user_id: number | null
    calories: number | null
  }

  export type RecommendationsSumAggregateOutputType = {
    rec_id: number | null
    user_id: number | null
    calories: number | null
  }

  export type RecommendationsMinAggregateOutputType = {
    rec_id: number | null
    user_id: number | null
    rec_type: string | null
    description: string | null
    calories: number | null
    created_at: Date | null
  }

  export type RecommendationsMaxAggregateOutputType = {
    rec_id: number | null
    user_id: number | null
    rec_type: string | null
    description: string | null
    calories: number | null
    created_at: Date | null
  }

  export type RecommendationsCountAggregateOutputType = {
    rec_id: number
    user_id: number
    rec_type: number
    description: number
    calories: number
    created_at: number
    _all: number
  }


  export type RecommendationsAvgAggregateInputType = {
    rec_id?: true
    user_id?: true
    calories?: true
  }

  export type RecommendationsSumAggregateInputType = {
    rec_id?: true
    user_id?: true
    calories?: true
  }

  export type RecommendationsMinAggregateInputType = {
    rec_id?: true
    user_id?: true
    rec_type?: true
    description?: true
    calories?: true
    created_at?: true
  }

  export type RecommendationsMaxAggregateInputType = {
    rec_id?: true
    user_id?: true
    rec_type?: true
    description?: true
    calories?: true
    created_at?: true
  }

  export type RecommendationsCountAggregateInputType = {
    rec_id?: true
    user_id?: true
    rec_type?: true
    description?: true
    calories?: true
    created_at?: true
    _all?: true
  }

  export type RecommendationsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which recommendations to aggregate.
     */
    where?: recommendationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of recommendations to fetch.
     */
    orderBy?: recommendationsOrderByWithRelationInput | recommendationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: recommendationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` recommendations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` recommendations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned recommendations
    **/
    _count?: true | RecommendationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RecommendationsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RecommendationsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecommendationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecommendationsMaxAggregateInputType
  }

  export type GetRecommendationsAggregateType<T extends RecommendationsAggregateArgs> = {
        [P in keyof T & keyof AggregateRecommendations]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecommendations[P]>
      : GetScalarType<T[P], AggregateRecommendations[P]>
  }




  export type recommendationsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: recommendationsWhereInput
    orderBy?: recommendationsOrderByWithAggregationInput | recommendationsOrderByWithAggregationInput[]
    by: RecommendationsScalarFieldEnum[] | RecommendationsScalarFieldEnum
    having?: recommendationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecommendationsCountAggregateInputType | true
    _avg?: RecommendationsAvgAggregateInputType
    _sum?: RecommendationsSumAggregateInputType
    _min?: RecommendationsMinAggregateInputType
    _max?: RecommendationsMaxAggregateInputType
  }

  export type RecommendationsGroupByOutputType = {
    rec_id: number
    user_id: number | null
    rec_type: string | null
    description: string | null
    calories: number | null
    created_at: Date | null
    _count: RecommendationsCountAggregateOutputType | null
    _avg: RecommendationsAvgAggregateOutputType | null
    _sum: RecommendationsSumAggregateOutputType | null
    _min: RecommendationsMinAggregateOutputType | null
    _max: RecommendationsMaxAggregateOutputType | null
  }

  type GetRecommendationsGroupByPayload<T extends recommendationsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RecommendationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecommendationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecommendationsGroupByOutputType[P]>
            : GetScalarType<T[P], RecommendationsGroupByOutputType[P]>
        }
      >
    >


  export type recommendationsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    rec_id?: boolean
    user_id?: boolean
    rec_type?: boolean
    description?: boolean
    calories?: boolean
    created_at?: boolean
    users?: boolean | recommendations$usersArgs<ExtArgs>
  }, ExtArgs["result"]["recommendations"]>



  export type recommendationsSelectScalar = {
    rec_id?: boolean
    user_id?: boolean
    rec_type?: boolean
    description?: boolean
    calories?: boolean
    created_at?: boolean
  }

  export type recommendationsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"rec_id" | "user_id" | "rec_type" | "description" | "calories" | "created_at", ExtArgs["result"]["recommendations"]>
  export type recommendationsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | recommendations$usersArgs<ExtArgs>
  }

  export type $recommendationsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "recommendations"
    objects: {
      users: Prisma.$usersPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      rec_id: number
      user_id: number | null
      rec_type: string | null
      description: string | null
      calories: number | null
      created_at: Date | null
    }, ExtArgs["result"]["recommendations"]>
    composites: {}
  }

  type recommendationsGetPayload<S extends boolean | null | undefined | recommendationsDefaultArgs> = $Result.GetResult<Prisma.$recommendationsPayload, S>

  type recommendationsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<recommendationsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RecommendationsCountAggregateInputType | true
    }

  export interface recommendationsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['recommendations'], meta: { name: 'recommendations' } }
    /**
     * Find zero or one Recommendations that matches the filter.
     * @param {recommendationsFindUniqueArgs} args - Arguments to find a Recommendations
     * @example
     * // Get one Recommendations
     * const recommendations = await prisma.recommendations.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends recommendationsFindUniqueArgs>(args: SelectSubset<T, recommendationsFindUniqueArgs<ExtArgs>>): Prisma__recommendationsClient<$Result.GetResult<Prisma.$recommendationsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Recommendations that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {recommendationsFindUniqueOrThrowArgs} args - Arguments to find a Recommendations
     * @example
     * // Get one Recommendations
     * const recommendations = await prisma.recommendations.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends recommendationsFindUniqueOrThrowArgs>(args: SelectSubset<T, recommendationsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__recommendationsClient<$Result.GetResult<Prisma.$recommendationsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Recommendations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {recommendationsFindFirstArgs} args - Arguments to find a Recommendations
     * @example
     * // Get one Recommendations
     * const recommendations = await prisma.recommendations.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends recommendationsFindFirstArgs>(args?: SelectSubset<T, recommendationsFindFirstArgs<ExtArgs>>): Prisma__recommendationsClient<$Result.GetResult<Prisma.$recommendationsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Recommendations that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {recommendationsFindFirstOrThrowArgs} args - Arguments to find a Recommendations
     * @example
     * // Get one Recommendations
     * const recommendations = await prisma.recommendations.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends recommendationsFindFirstOrThrowArgs>(args?: SelectSubset<T, recommendationsFindFirstOrThrowArgs<ExtArgs>>): Prisma__recommendationsClient<$Result.GetResult<Prisma.$recommendationsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Recommendations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {recommendationsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Recommendations
     * const recommendations = await prisma.recommendations.findMany()
     * 
     * // Get first 10 Recommendations
     * const recommendations = await prisma.recommendations.findMany({ take: 10 })
     * 
     * // Only select the `rec_id`
     * const recommendationsWithRec_idOnly = await prisma.recommendations.findMany({ select: { rec_id: true } })
     * 
     */
    findMany<T extends recommendationsFindManyArgs>(args?: SelectSubset<T, recommendationsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$recommendationsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Recommendations.
     * @param {recommendationsCreateArgs} args - Arguments to create a Recommendations.
     * @example
     * // Create one Recommendations
     * const Recommendations = await prisma.recommendations.create({
     *   data: {
     *     // ... data to create a Recommendations
     *   }
     * })
     * 
     */
    create<T extends recommendationsCreateArgs>(args: SelectSubset<T, recommendationsCreateArgs<ExtArgs>>): Prisma__recommendationsClient<$Result.GetResult<Prisma.$recommendationsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Recommendations.
     * @param {recommendationsCreateManyArgs} args - Arguments to create many Recommendations.
     * @example
     * // Create many Recommendations
     * const recommendations = await prisma.recommendations.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends recommendationsCreateManyArgs>(args?: SelectSubset<T, recommendationsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Recommendations.
     * @param {recommendationsDeleteArgs} args - Arguments to delete one Recommendations.
     * @example
     * // Delete one Recommendations
     * const Recommendations = await prisma.recommendations.delete({
     *   where: {
     *     // ... filter to delete one Recommendations
     *   }
     * })
     * 
     */
    delete<T extends recommendationsDeleteArgs>(args: SelectSubset<T, recommendationsDeleteArgs<ExtArgs>>): Prisma__recommendationsClient<$Result.GetResult<Prisma.$recommendationsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Recommendations.
     * @param {recommendationsUpdateArgs} args - Arguments to update one Recommendations.
     * @example
     * // Update one Recommendations
     * const recommendations = await prisma.recommendations.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends recommendationsUpdateArgs>(args: SelectSubset<T, recommendationsUpdateArgs<ExtArgs>>): Prisma__recommendationsClient<$Result.GetResult<Prisma.$recommendationsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Recommendations.
     * @param {recommendationsDeleteManyArgs} args - Arguments to filter Recommendations to delete.
     * @example
     * // Delete a few Recommendations
     * const { count } = await prisma.recommendations.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends recommendationsDeleteManyArgs>(args?: SelectSubset<T, recommendationsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recommendations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {recommendationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Recommendations
     * const recommendations = await prisma.recommendations.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends recommendationsUpdateManyArgs>(args: SelectSubset<T, recommendationsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Recommendations.
     * @param {recommendationsUpsertArgs} args - Arguments to update or create a Recommendations.
     * @example
     * // Update or create a Recommendations
     * const recommendations = await prisma.recommendations.upsert({
     *   create: {
     *     // ... data to create a Recommendations
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Recommendations we want to update
     *   }
     * })
     */
    upsert<T extends recommendationsUpsertArgs>(args: SelectSubset<T, recommendationsUpsertArgs<ExtArgs>>): Prisma__recommendationsClient<$Result.GetResult<Prisma.$recommendationsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Recommendations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {recommendationsCountArgs} args - Arguments to filter Recommendations to count.
     * @example
     * // Count the number of Recommendations
     * const count = await prisma.recommendations.count({
     *   where: {
     *     // ... the filter for the Recommendations we want to count
     *   }
     * })
    **/
    count<T extends recommendationsCountArgs>(
      args?: Subset<T, recommendationsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecommendationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Recommendations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecommendationsAggregateArgs>(args: Subset<T, RecommendationsAggregateArgs>): Prisma.PrismaPromise<GetRecommendationsAggregateType<T>>

    /**
     * Group by Recommendations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {recommendationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends recommendationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: recommendationsGroupByArgs['orderBy'] }
        : { orderBy?: recommendationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, recommendationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecommendationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the recommendations model
   */
  readonly fields: recommendationsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for recommendations.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__recommendationsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends recommendations$usersArgs<ExtArgs> = {}>(args?: Subset<T, recommendations$usersArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the recommendations model
   */
  interface recommendationsFieldRefs {
    readonly rec_id: FieldRef<"recommendations", 'Int'>
    readonly user_id: FieldRef<"recommendations", 'Int'>
    readonly rec_type: FieldRef<"recommendations", 'String'>
    readonly description: FieldRef<"recommendations", 'String'>
    readonly calories: FieldRef<"recommendations", 'Int'>
    readonly created_at: FieldRef<"recommendations", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * recommendations findUnique
   */
  export type recommendationsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recommendations
     */
    select?: recommendationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the recommendations
     */
    omit?: recommendationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recommendationsInclude<ExtArgs> | null
    /**
     * Filter, which recommendations to fetch.
     */
    where: recommendationsWhereUniqueInput
  }

  /**
   * recommendations findUniqueOrThrow
   */
  export type recommendationsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recommendations
     */
    select?: recommendationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the recommendations
     */
    omit?: recommendationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recommendationsInclude<ExtArgs> | null
    /**
     * Filter, which recommendations to fetch.
     */
    where: recommendationsWhereUniqueInput
  }

  /**
   * recommendations findFirst
   */
  export type recommendationsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recommendations
     */
    select?: recommendationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the recommendations
     */
    omit?: recommendationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recommendationsInclude<ExtArgs> | null
    /**
     * Filter, which recommendations to fetch.
     */
    where?: recommendationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of recommendations to fetch.
     */
    orderBy?: recommendationsOrderByWithRelationInput | recommendationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for recommendations.
     */
    cursor?: recommendationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` recommendations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` recommendations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of recommendations.
     */
    distinct?: RecommendationsScalarFieldEnum | RecommendationsScalarFieldEnum[]
  }

  /**
   * recommendations findFirstOrThrow
   */
  export type recommendationsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recommendations
     */
    select?: recommendationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the recommendations
     */
    omit?: recommendationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recommendationsInclude<ExtArgs> | null
    /**
     * Filter, which recommendations to fetch.
     */
    where?: recommendationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of recommendations to fetch.
     */
    orderBy?: recommendationsOrderByWithRelationInput | recommendationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for recommendations.
     */
    cursor?: recommendationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` recommendations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` recommendations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of recommendations.
     */
    distinct?: RecommendationsScalarFieldEnum | RecommendationsScalarFieldEnum[]
  }

  /**
   * recommendations findMany
   */
  export type recommendationsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recommendations
     */
    select?: recommendationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the recommendations
     */
    omit?: recommendationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recommendationsInclude<ExtArgs> | null
    /**
     * Filter, which recommendations to fetch.
     */
    where?: recommendationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of recommendations to fetch.
     */
    orderBy?: recommendationsOrderByWithRelationInput | recommendationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing recommendations.
     */
    cursor?: recommendationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` recommendations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` recommendations.
     */
    skip?: number
    distinct?: RecommendationsScalarFieldEnum | RecommendationsScalarFieldEnum[]
  }

  /**
   * recommendations create
   */
  export type recommendationsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recommendations
     */
    select?: recommendationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the recommendations
     */
    omit?: recommendationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recommendationsInclude<ExtArgs> | null
    /**
     * The data needed to create a recommendations.
     */
    data?: XOR<recommendationsCreateInput, recommendationsUncheckedCreateInput>
  }

  /**
   * recommendations createMany
   */
  export type recommendationsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many recommendations.
     */
    data: recommendationsCreateManyInput | recommendationsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * recommendations update
   */
  export type recommendationsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recommendations
     */
    select?: recommendationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the recommendations
     */
    omit?: recommendationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recommendationsInclude<ExtArgs> | null
    /**
     * The data needed to update a recommendations.
     */
    data: XOR<recommendationsUpdateInput, recommendationsUncheckedUpdateInput>
    /**
     * Choose, which recommendations to update.
     */
    where: recommendationsWhereUniqueInput
  }

  /**
   * recommendations updateMany
   */
  export type recommendationsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update recommendations.
     */
    data: XOR<recommendationsUpdateManyMutationInput, recommendationsUncheckedUpdateManyInput>
    /**
     * Filter which recommendations to update
     */
    where?: recommendationsWhereInput
    /**
     * Limit how many recommendations to update.
     */
    limit?: number
  }

  /**
   * recommendations upsert
   */
  export type recommendationsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recommendations
     */
    select?: recommendationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the recommendations
     */
    omit?: recommendationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recommendationsInclude<ExtArgs> | null
    /**
     * The filter to search for the recommendations to update in case it exists.
     */
    where: recommendationsWhereUniqueInput
    /**
     * In case the recommendations found by the `where` argument doesn't exist, create a new recommendations with this data.
     */
    create: XOR<recommendationsCreateInput, recommendationsUncheckedCreateInput>
    /**
     * In case the recommendations was found with the provided `where` argument, update it with this data.
     */
    update: XOR<recommendationsUpdateInput, recommendationsUncheckedUpdateInput>
  }

  /**
   * recommendations delete
   */
  export type recommendationsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recommendations
     */
    select?: recommendationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the recommendations
     */
    omit?: recommendationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recommendationsInclude<ExtArgs> | null
    /**
     * Filter which recommendations to delete.
     */
    where: recommendationsWhereUniqueInput
  }

  /**
   * recommendations deleteMany
   */
  export type recommendationsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which recommendations to delete
     */
    where?: recommendationsWhereInput
    /**
     * Limit how many recommendations to delete.
     */
    limit?: number
  }

  /**
   * recommendations.users
   */
  export type recommendations$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }

  /**
   * recommendations without action
   */
  export type recommendationsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recommendations
     */
    select?: recommendationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the recommendations
     */
    omit?: recommendationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recommendationsInclude<ExtArgs> | null
  }


  /**
   * Model usermetrics
   */

  export type AggregateUsermetrics = {
    _count: UsermetricsCountAggregateOutputType | null
    _avg: UsermetricsAvgAggregateOutputType | null
    _sum: UsermetricsSumAggregateOutputType | null
    _min: UsermetricsMinAggregateOutputType | null
    _max: UsermetricsMaxAggregateOutputType | null
  }

  export type UsermetricsAvgAggregateOutputType = {
    metric_id: number | null
    user_id: number | null
    weight: Decimal | null
    height: Decimal | null
    bmi: Decimal | null
  }

  export type UsermetricsSumAggregateOutputType = {
    metric_id: number | null
    user_id: number | null
    weight: Decimal | null
    height: Decimal | null
    bmi: Decimal | null
  }

  export type UsermetricsMinAggregateOutputType = {
    metric_id: number | null
    user_id: number | null
    weight: Decimal | null
    height: Decimal | null
    bmi: Decimal | null
    recorded_at: Date | null
  }

  export type UsermetricsMaxAggregateOutputType = {
    metric_id: number | null
    user_id: number | null
    weight: Decimal | null
    height: Decimal | null
    bmi: Decimal | null
    recorded_at: Date | null
  }

  export type UsermetricsCountAggregateOutputType = {
    metric_id: number
    user_id: number
    weight: number
    height: number
    bmi: number
    recorded_at: number
    _all: number
  }


  export type UsermetricsAvgAggregateInputType = {
    metric_id?: true
    user_id?: true
    weight?: true
    height?: true
    bmi?: true
  }

  export type UsermetricsSumAggregateInputType = {
    metric_id?: true
    user_id?: true
    weight?: true
    height?: true
    bmi?: true
  }

  export type UsermetricsMinAggregateInputType = {
    metric_id?: true
    user_id?: true
    weight?: true
    height?: true
    bmi?: true
    recorded_at?: true
  }

  export type UsermetricsMaxAggregateInputType = {
    metric_id?: true
    user_id?: true
    weight?: true
    height?: true
    bmi?: true
    recorded_at?: true
  }

  export type UsermetricsCountAggregateInputType = {
    metric_id?: true
    user_id?: true
    weight?: true
    height?: true
    bmi?: true
    recorded_at?: true
    _all?: true
  }

  export type UsermetricsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which usermetrics to aggregate.
     */
    where?: usermetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usermetrics to fetch.
     */
    orderBy?: usermetricsOrderByWithRelationInput | usermetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usermetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usermetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usermetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned usermetrics
    **/
    _count?: true | UsermetricsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsermetricsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsermetricsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsermetricsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsermetricsMaxAggregateInputType
  }

  export type GetUsermetricsAggregateType<T extends UsermetricsAggregateArgs> = {
        [P in keyof T & keyof AggregateUsermetrics]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsermetrics[P]>
      : GetScalarType<T[P], AggregateUsermetrics[P]>
  }




  export type usermetricsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usermetricsWhereInput
    orderBy?: usermetricsOrderByWithAggregationInput | usermetricsOrderByWithAggregationInput[]
    by: UsermetricsScalarFieldEnum[] | UsermetricsScalarFieldEnum
    having?: usermetricsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsermetricsCountAggregateInputType | true
    _avg?: UsermetricsAvgAggregateInputType
    _sum?: UsermetricsSumAggregateInputType
    _min?: UsermetricsMinAggregateInputType
    _max?: UsermetricsMaxAggregateInputType
  }

  export type UsermetricsGroupByOutputType = {
    metric_id: number
    user_id: number | null
    weight: Decimal | null
    height: Decimal | null
    bmi: Decimal | null
    recorded_at: Date | null
    _count: UsermetricsCountAggregateOutputType | null
    _avg: UsermetricsAvgAggregateOutputType | null
    _sum: UsermetricsSumAggregateOutputType | null
    _min: UsermetricsMinAggregateOutputType | null
    _max: UsermetricsMaxAggregateOutputType | null
  }

  type GetUsermetricsGroupByPayload<T extends usermetricsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsermetricsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsermetricsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsermetricsGroupByOutputType[P]>
            : GetScalarType<T[P], UsermetricsGroupByOutputType[P]>
        }
      >
    >


  export type usermetricsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    metric_id?: boolean
    user_id?: boolean
    weight?: boolean
    height?: boolean
    bmi?: boolean
    recorded_at?: boolean
    users?: boolean | usermetrics$usersArgs<ExtArgs>
  }, ExtArgs["result"]["usermetrics"]>



  export type usermetricsSelectScalar = {
    metric_id?: boolean
    user_id?: boolean
    weight?: boolean
    height?: boolean
    bmi?: boolean
    recorded_at?: boolean
  }

  export type usermetricsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"metric_id" | "user_id" | "weight" | "height" | "bmi" | "recorded_at", ExtArgs["result"]["usermetrics"]>
  export type usermetricsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | usermetrics$usersArgs<ExtArgs>
  }

  export type $usermetricsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "usermetrics"
    objects: {
      users: Prisma.$usersPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      metric_id: number
      user_id: number | null
      weight: Prisma.Decimal | null
      height: Prisma.Decimal | null
      bmi: Prisma.Decimal | null
      recorded_at: Date | null
    }, ExtArgs["result"]["usermetrics"]>
    composites: {}
  }

  type usermetricsGetPayload<S extends boolean | null | undefined | usermetricsDefaultArgs> = $Result.GetResult<Prisma.$usermetricsPayload, S>

  type usermetricsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<usermetricsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsermetricsCountAggregateInputType | true
    }

  export interface usermetricsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['usermetrics'], meta: { name: 'usermetrics' } }
    /**
     * Find zero or one Usermetrics that matches the filter.
     * @param {usermetricsFindUniqueArgs} args - Arguments to find a Usermetrics
     * @example
     * // Get one Usermetrics
     * const usermetrics = await prisma.usermetrics.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends usermetricsFindUniqueArgs>(args: SelectSubset<T, usermetricsFindUniqueArgs<ExtArgs>>): Prisma__usermetricsClient<$Result.GetResult<Prisma.$usermetricsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Usermetrics that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {usermetricsFindUniqueOrThrowArgs} args - Arguments to find a Usermetrics
     * @example
     * // Get one Usermetrics
     * const usermetrics = await prisma.usermetrics.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends usermetricsFindUniqueOrThrowArgs>(args: SelectSubset<T, usermetricsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__usermetricsClient<$Result.GetResult<Prisma.$usermetricsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usermetrics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usermetricsFindFirstArgs} args - Arguments to find a Usermetrics
     * @example
     * // Get one Usermetrics
     * const usermetrics = await prisma.usermetrics.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends usermetricsFindFirstArgs>(args?: SelectSubset<T, usermetricsFindFirstArgs<ExtArgs>>): Prisma__usermetricsClient<$Result.GetResult<Prisma.$usermetricsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usermetrics that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usermetricsFindFirstOrThrowArgs} args - Arguments to find a Usermetrics
     * @example
     * // Get one Usermetrics
     * const usermetrics = await prisma.usermetrics.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends usermetricsFindFirstOrThrowArgs>(args?: SelectSubset<T, usermetricsFindFirstOrThrowArgs<ExtArgs>>): Prisma__usermetricsClient<$Result.GetResult<Prisma.$usermetricsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Usermetrics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usermetricsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usermetrics
     * const usermetrics = await prisma.usermetrics.findMany()
     * 
     * // Get first 10 Usermetrics
     * const usermetrics = await prisma.usermetrics.findMany({ take: 10 })
     * 
     * // Only select the `metric_id`
     * const usermetricsWithMetric_idOnly = await prisma.usermetrics.findMany({ select: { metric_id: true } })
     * 
     */
    findMany<T extends usermetricsFindManyArgs>(args?: SelectSubset<T, usermetricsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usermetricsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Usermetrics.
     * @param {usermetricsCreateArgs} args - Arguments to create a Usermetrics.
     * @example
     * // Create one Usermetrics
     * const Usermetrics = await prisma.usermetrics.create({
     *   data: {
     *     // ... data to create a Usermetrics
     *   }
     * })
     * 
     */
    create<T extends usermetricsCreateArgs>(args: SelectSubset<T, usermetricsCreateArgs<ExtArgs>>): Prisma__usermetricsClient<$Result.GetResult<Prisma.$usermetricsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Usermetrics.
     * @param {usermetricsCreateManyArgs} args - Arguments to create many Usermetrics.
     * @example
     * // Create many Usermetrics
     * const usermetrics = await prisma.usermetrics.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends usermetricsCreateManyArgs>(args?: SelectSubset<T, usermetricsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Usermetrics.
     * @param {usermetricsDeleteArgs} args - Arguments to delete one Usermetrics.
     * @example
     * // Delete one Usermetrics
     * const Usermetrics = await prisma.usermetrics.delete({
     *   where: {
     *     // ... filter to delete one Usermetrics
     *   }
     * })
     * 
     */
    delete<T extends usermetricsDeleteArgs>(args: SelectSubset<T, usermetricsDeleteArgs<ExtArgs>>): Prisma__usermetricsClient<$Result.GetResult<Prisma.$usermetricsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Usermetrics.
     * @param {usermetricsUpdateArgs} args - Arguments to update one Usermetrics.
     * @example
     * // Update one Usermetrics
     * const usermetrics = await prisma.usermetrics.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends usermetricsUpdateArgs>(args: SelectSubset<T, usermetricsUpdateArgs<ExtArgs>>): Prisma__usermetricsClient<$Result.GetResult<Prisma.$usermetricsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Usermetrics.
     * @param {usermetricsDeleteManyArgs} args - Arguments to filter Usermetrics to delete.
     * @example
     * // Delete a few Usermetrics
     * const { count } = await prisma.usermetrics.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends usermetricsDeleteManyArgs>(args?: SelectSubset<T, usermetricsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usermetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usermetricsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usermetrics
     * const usermetrics = await prisma.usermetrics.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends usermetricsUpdateManyArgs>(args: SelectSubset<T, usermetricsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usermetrics.
     * @param {usermetricsUpsertArgs} args - Arguments to update or create a Usermetrics.
     * @example
     * // Update or create a Usermetrics
     * const usermetrics = await prisma.usermetrics.upsert({
     *   create: {
     *     // ... data to create a Usermetrics
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usermetrics we want to update
     *   }
     * })
     */
    upsert<T extends usermetricsUpsertArgs>(args: SelectSubset<T, usermetricsUpsertArgs<ExtArgs>>): Prisma__usermetricsClient<$Result.GetResult<Prisma.$usermetricsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Usermetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usermetricsCountArgs} args - Arguments to filter Usermetrics to count.
     * @example
     * // Count the number of Usermetrics
     * const count = await prisma.usermetrics.count({
     *   where: {
     *     // ... the filter for the Usermetrics we want to count
     *   }
     * })
    **/
    count<T extends usermetricsCountArgs>(
      args?: Subset<T, usermetricsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsermetricsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usermetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsermetricsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsermetricsAggregateArgs>(args: Subset<T, UsermetricsAggregateArgs>): Prisma.PrismaPromise<GetUsermetricsAggregateType<T>>

    /**
     * Group by Usermetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usermetricsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usermetricsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usermetricsGroupByArgs['orderBy'] }
        : { orderBy?: usermetricsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usermetricsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsermetricsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the usermetrics model
   */
  readonly fields: usermetricsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for usermetrics.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usermetricsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends usermetrics$usersArgs<ExtArgs> = {}>(args?: Subset<T, usermetrics$usersArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the usermetrics model
   */
  interface usermetricsFieldRefs {
    readonly metric_id: FieldRef<"usermetrics", 'Int'>
    readonly user_id: FieldRef<"usermetrics", 'Int'>
    readonly weight: FieldRef<"usermetrics", 'Decimal'>
    readonly height: FieldRef<"usermetrics", 'Decimal'>
    readonly bmi: FieldRef<"usermetrics", 'Decimal'>
    readonly recorded_at: FieldRef<"usermetrics", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * usermetrics findUnique
   */
  export type usermetricsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usermetrics
     */
    select?: usermetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the usermetrics
     */
    omit?: usermetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usermetricsInclude<ExtArgs> | null
    /**
     * Filter, which usermetrics to fetch.
     */
    where: usermetricsWhereUniqueInput
  }

  /**
   * usermetrics findUniqueOrThrow
   */
  export type usermetricsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usermetrics
     */
    select?: usermetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the usermetrics
     */
    omit?: usermetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usermetricsInclude<ExtArgs> | null
    /**
     * Filter, which usermetrics to fetch.
     */
    where: usermetricsWhereUniqueInput
  }

  /**
   * usermetrics findFirst
   */
  export type usermetricsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usermetrics
     */
    select?: usermetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the usermetrics
     */
    omit?: usermetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usermetricsInclude<ExtArgs> | null
    /**
     * Filter, which usermetrics to fetch.
     */
    where?: usermetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usermetrics to fetch.
     */
    orderBy?: usermetricsOrderByWithRelationInput | usermetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usermetrics.
     */
    cursor?: usermetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usermetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usermetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usermetrics.
     */
    distinct?: UsermetricsScalarFieldEnum | UsermetricsScalarFieldEnum[]
  }

  /**
   * usermetrics findFirstOrThrow
   */
  export type usermetricsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usermetrics
     */
    select?: usermetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the usermetrics
     */
    omit?: usermetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usermetricsInclude<ExtArgs> | null
    /**
     * Filter, which usermetrics to fetch.
     */
    where?: usermetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usermetrics to fetch.
     */
    orderBy?: usermetricsOrderByWithRelationInput | usermetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usermetrics.
     */
    cursor?: usermetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usermetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usermetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usermetrics.
     */
    distinct?: UsermetricsScalarFieldEnum | UsermetricsScalarFieldEnum[]
  }

  /**
   * usermetrics findMany
   */
  export type usermetricsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usermetrics
     */
    select?: usermetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the usermetrics
     */
    omit?: usermetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usermetricsInclude<ExtArgs> | null
    /**
     * Filter, which usermetrics to fetch.
     */
    where?: usermetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usermetrics to fetch.
     */
    orderBy?: usermetricsOrderByWithRelationInput | usermetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing usermetrics.
     */
    cursor?: usermetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usermetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usermetrics.
     */
    skip?: number
    distinct?: UsermetricsScalarFieldEnum | UsermetricsScalarFieldEnum[]
  }

  /**
   * usermetrics create
   */
  export type usermetricsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usermetrics
     */
    select?: usermetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the usermetrics
     */
    omit?: usermetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usermetricsInclude<ExtArgs> | null
    /**
     * The data needed to create a usermetrics.
     */
    data?: XOR<usermetricsCreateInput, usermetricsUncheckedCreateInput>
  }

  /**
   * usermetrics createMany
   */
  export type usermetricsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many usermetrics.
     */
    data: usermetricsCreateManyInput | usermetricsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * usermetrics update
   */
  export type usermetricsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usermetrics
     */
    select?: usermetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the usermetrics
     */
    omit?: usermetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usermetricsInclude<ExtArgs> | null
    /**
     * The data needed to update a usermetrics.
     */
    data: XOR<usermetricsUpdateInput, usermetricsUncheckedUpdateInput>
    /**
     * Choose, which usermetrics to update.
     */
    where: usermetricsWhereUniqueInput
  }

  /**
   * usermetrics updateMany
   */
  export type usermetricsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update usermetrics.
     */
    data: XOR<usermetricsUpdateManyMutationInput, usermetricsUncheckedUpdateManyInput>
    /**
     * Filter which usermetrics to update
     */
    where?: usermetricsWhereInput
    /**
     * Limit how many usermetrics to update.
     */
    limit?: number
  }

  /**
   * usermetrics upsert
   */
  export type usermetricsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usermetrics
     */
    select?: usermetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the usermetrics
     */
    omit?: usermetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usermetricsInclude<ExtArgs> | null
    /**
     * The filter to search for the usermetrics to update in case it exists.
     */
    where: usermetricsWhereUniqueInput
    /**
     * In case the usermetrics found by the `where` argument doesn't exist, create a new usermetrics with this data.
     */
    create: XOR<usermetricsCreateInput, usermetricsUncheckedCreateInput>
    /**
     * In case the usermetrics was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usermetricsUpdateInput, usermetricsUncheckedUpdateInput>
  }

  /**
   * usermetrics delete
   */
  export type usermetricsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usermetrics
     */
    select?: usermetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the usermetrics
     */
    omit?: usermetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usermetricsInclude<ExtArgs> | null
    /**
     * Filter which usermetrics to delete.
     */
    where: usermetricsWhereUniqueInput
  }

  /**
   * usermetrics deleteMany
   */
  export type usermetricsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which usermetrics to delete
     */
    where?: usermetricsWhereInput
    /**
     * Limit how many usermetrics to delete.
     */
    limit?: number
  }

  /**
   * usermetrics.users
   */
  export type usermetrics$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }

  /**
   * usermetrics without action
   */
  export type usermetricsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usermetrics
     */
    select?: usermetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the usermetrics
     */
    omit?: usermetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usermetricsInclude<ExtArgs> | null
  }


  /**
   * Model users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    user_id: number | null
  }

  export type UsersSumAggregateOutputType = {
    user_id: number | null
  }

  export type UsersMinAggregateOutputType = {
    user_id: number | null
    name: string | null
    password_hash: string | null
    email: string | null
    date_of_birth: Date | null
    gender: string | null
    last_login: Date | null
    created_at: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    user_id: number | null
    name: string | null
    password_hash: string | null
    email: string | null
    date_of_birth: Date | null
    gender: string | null
    last_login: Date | null
    created_at: Date | null
  }

  export type UsersCountAggregateOutputType = {
    user_id: number
    name: number
    password_hash: number
    email: number
    date_of_birth: number
    gender: number
    last_login: number
    created_at: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    user_id?: true
  }

  export type UsersSumAggregateInputType = {
    user_id?: true
  }

  export type UsersMinAggregateInputType = {
    user_id?: true
    name?: true
    password_hash?: true
    email?: true
    date_of_birth?: true
    gender?: true
    last_login?: true
    created_at?: true
  }

  export type UsersMaxAggregateInputType = {
    user_id?: true
    name?: true
    password_hash?: true
    email?: true
    date_of_birth?: true
    gender?: true
    last_login?: true
    created_at?: true
  }

  export type UsersCountAggregateInputType = {
    user_id?: true
    name?: true
    password_hash?: true
    email?: true
    date_of_birth?: true
    gender?: true
    last_login?: true
    created_at?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    user_id: number
    name: string | null
    password_hash: string
    email: string | null
    date_of_birth: Date | null
    gender: string | null
    last_login: Date | null
    created_at: Date | null
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_id?: boolean
    name?: boolean
    password_hash?: boolean
    email?: boolean
    date_of_birth?: boolean
    gender?: boolean
    last_login?: boolean
    created_at?: boolean
    goals?: boolean | users$goalsArgs<ExtArgs>
    healthconditions?: boolean | users$healthconditionsArgs<ExtArgs>
    recommendations?: boolean | users$recommendationsArgs<ExtArgs>
    usermetrics?: boolean | users$usermetricsArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>



  export type usersSelectScalar = {
    user_id?: boolean
    name?: boolean
    password_hash?: boolean
    email?: boolean
    date_of_birth?: boolean
    gender?: boolean
    last_login?: boolean
    created_at?: boolean
  }

  export type usersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"user_id" | "name" | "password_hash" | "email" | "date_of_birth" | "gender" | "last_login" | "created_at", ExtArgs["result"]["users"]>
  export type usersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    goals?: boolean | users$goalsArgs<ExtArgs>
    healthconditions?: boolean | users$healthconditionsArgs<ExtArgs>
    recommendations?: boolean | users$recommendationsArgs<ExtArgs>
    usermetrics?: boolean | users$usermetricsArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users"
    objects: {
      goals: Prisma.$goalsPayload<ExtArgs>[]
      healthconditions: Prisma.$healthconditionsPayload<ExtArgs>[]
      recommendations: Prisma.$recommendationsPayload<ExtArgs>[]
      usermetrics: Prisma.$usermetricsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      user_id: number
      name: string | null
      password_hash: string
      email: string | null
      date_of_birth: Date | null
      gender: string | null
      last_login: Date | null
      created_at: Date | null
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type usersGetPayload<S extends boolean | null | undefined | usersDefaultArgs> = $Result.GetResult<Prisma.$usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<usersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends usersFindUniqueArgs>(args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs>(args: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends usersFindFirstArgs>(args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs>(args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const usersWithUser_idOnly = await prisma.users.findMany({ select: { user_id: true } })
     * 
     */
    findMany<T extends usersFindManyArgs>(args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends usersCreateArgs>(args: SelectSubset<T, usersCreateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {usersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends usersCreateManyArgs>(args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends usersDeleteArgs>(args: SelectSubset<T, usersDeleteArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends usersUpdateArgs>(args: SelectSubset<T, usersUpdateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends usersDeleteManyArgs>(args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends usersUpdateManyArgs>(args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends usersUpsertArgs>(args: SelectSubset<T, usersUpsertArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    goals<T extends users$goalsArgs<ExtArgs> = {}>(args?: Subset<T, users$goalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$goalsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    healthconditions<T extends users$healthconditionsArgs<ExtArgs> = {}>(args?: Subset<T, users$healthconditionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$healthconditionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    recommendations<T extends users$recommendationsArgs<ExtArgs> = {}>(args?: Subset<T, users$recommendationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$recommendationsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    usermetrics<T extends users$usermetricsArgs<ExtArgs> = {}>(args?: Subset<T, users$usermetricsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usermetricsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the users model
   */
  interface usersFieldRefs {
    readonly user_id: FieldRef<"users", 'Int'>
    readonly name: FieldRef<"users", 'String'>
    readonly password_hash: FieldRef<"users", 'String'>
    readonly email: FieldRef<"users", 'String'>
    readonly date_of_birth: FieldRef<"users", 'DateTime'>
    readonly gender: FieldRef<"users", 'String'>
    readonly last_login: FieldRef<"users", 'DateTime'>
    readonly created_at: FieldRef<"users", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }

  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
    /**
     * Limit how many users to update.
     */
    limit?: number
  }

  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }

  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
    /**
     * Limit how many users to delete.
     */
    limit?: number
  }

  /**
   * users.goals
   */
  export type users$goalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the goals
     */
    select?: goalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the goals
     */
    omit?: goalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: goalsInclude<ExtArgs> | null
    where?: goalsWhereInput
    orderBy?: goalsOrderByWithRelationInput | goalsOrderByWithRelationInput[]
    cursor?: goalsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GoalsScalarFieldEnum | GoalsScalarFieldEnum[]
  }

  /**
   * users.healthconditions
   */
  export type users$healthconditionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the healthconditions
     */
    select?: healthconditionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the healthconditions
     */
    omit?: healthconditionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: healthconditionsInclude<ExtArgs> | null
    where?: healthconditionsWhereInput
    orderBy?: healthconditionsOrderByWithRelationInput | healthconditionsOrderByWithRelationInput[]
    cursor?: healthconditionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HealthconditionsScalarFieldEnum | HealthconditionsScalarFieldEnum[]
  }

  /**
   * users.recommendations
   */
  export type users$recommendationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recommendations
     */
    select?: recommendationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the recommendations
     */
    omit?: recommendationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: recommendationsInclude<ExtArgs> | null
    where?: recommendationsWhereInput
    orderBy?: recommendationsOrderByWithRelationInput | recommendationsOrderByWithRelationInput[]
    cursor?: recommendationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecommendationsScalarFieldEnum | RecommendationsScalarFieldEnum[]
  }

  /**
   * users.usermetrics
   */
  export type users$usermetricsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usermetrics
     */
    select?: usermetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the usermetrics
     */
    omit?: usermetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usermetricsInclude<ExtArgs> | null
    where?: usermetricsWhereInput
    orderBy?: usermetricsOrderByWithRelationInput | usermetricsOrderByWithRelationInput[]
    cursor?: usermetricsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsermetricsScalarFieldEnum | UsermetricsScalarFieldEnum[]
  }

  /**
   * users without action
   */
  export type usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const GoalsScalarFieldEnum: {
    goal_id: 'goal_id',
    user_id: 'user_id',
    goal_type: 'goal_type',
    target_weight: 'target_weight',
    target_date: 'target_date',
    created_at: 'created_at'
  };

  export type GoalsScalarFieldEnum = (typeof GoalsScalarFieldEnum)[keyof typeof GoalsScalarFieldEnum]


  export const HealthconditionsScalarFieldEnum: {
    condition_id: 'condition_id',
    user_id: 'user_id',
    condition_name: 'condition_name',
    severity: 'severity',
    diagnosed_at: 'diagnosed_at'
  };

  export type HealthconditionsScalarFieldEnum = (typeof HealthconditionsScalarFieldEnum)[keyof typeof HealthconditionsScalarFieldEnum]


  export const RecommendationsScalarFieldEnum: {
    rec_id: 'rec_id',
    user_id: 'user_id',
    rec_type: 'rec_type',
    description: 'description',
    calories: 'calories',
    created_at: 'created_at'
  };

  export type RecommendationsScalarFieldEnum = (typeof RecommendationsScalarFieldEnum)[keyof typeof RecommendationsScalarFieldEnum]


  export const UsermetricsScalarFieldEnum: {
    metric_id: 'metric_id',
    user_id: 'user_id',
    weight: 'weight',
    height: 'height',
    bmi: 'bmi',
    recorded_at: 'recorded_at'
  };

  export type UsermetricsScalarFieldEnum = (typeof UsermetricsScalarFieldEnum)[keyof typeof UsermetricsScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    user_id: 'user_id',
    name: 'name',
    password_hash: 'password_hash',
    email: 'email',
    date_of_birth: 'date_of_birth',
    gender: 'gender',
    last_login: 'last_login',
    created_at: 'created_at'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const goalsOrderByRelevanceFieldEnum: {
    goal_type: 'goal_type'
  };

  export type goalsOrderByRelevanceFieldEnum = (typeof goalsOrderByRelevanceFieldEnum)[keyof typeof goalsOrderByRelevanceFieldEnum]


  export const healthconditionsOrderByRelevanceFieldEnum: {
    condition_name: 'condition_name',
    severity: 'severity'
  };

  export type healthconditionsOrderByRelevanceFieldEnum = (typeof healthconditionsOrderByRelevanceFieldEnum)[keyof typeof healthconditionsOrderByRelevanceFieldEnum]


  export const recommendationsOrderByRelevanceFieldEnum: {
    rec_type: 'rec_type',
    description: 'description'
  };

  export type recommendationsOrderByRelevanceFieldEnum = (typeof recommendationsOrderByRelevanceFieldEnum)[keyof typeof recommendationsOrderByRelevanceFieldEnum]


  export const usersOrderByRelevanceFieldEnum: {
    name: 'name',
    password_hash: 'password_hash',
    email: 'email',
    gender: 'gender'
  };

  export type usersOrderByRelevanceFieldEnum = (typeof usersOrderByRelevanceFieldEnum)[keyof typeof usersOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type goalsWhereInput = {
    AND?: goalsWhereInput | goalsWhereInput[]
    OR?: goalsWhereInput[]
    NOT?: goalsWhereInput | goalsWhereInput[]
    goal_id?: IntFilter<"goals"> | number
    user_id?: IntNullableFilter<"goals"> | number | null
    goal_type?: StringNullableFilter<"goals"> | string | null
    target_weight?: DecimalNullableFilter<"goals"> | Decimal | DecimalJsLike | number | string | null
    target_date?: DateTimeNullableFilter<"goals"> | Date | string | null
    created_at?: DateTimeNullableFilter<"goals"> | Date | string | null
    users?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
  }

  export type goalsOrderByWithRelationInput = {
    goal_id?: SortOrder
    user_id?: SortOrderInput | SortOrder
    goal_type?: SortOrderInput | SortOrder
    target_weight?: SortOrderInput | SortOrder
    target_date?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    users?: usersOrderByWithRelationInput
    _relevance?: goalsOrderByRelevanceInput
  }

  export type goalsWhereUniqueInput = Prisma.AtLeast<{
    goal_id?: number
    AND?: goalsWhereInput | goalsWhereInput[]
    OR?: goalsWhereInput[]
    NOT?: goalsWhereInput | goalsWhereInput[]
    user_id?: IntNullableFilter<"goals"> | number | null
    goal_type?: StringNullableFilter<"goals"> | string | null
    target_weight?: DecimalNullableFilter<"goals"> | Decimal | DecimalJsLike | number | string | null
    target_date?: DateTimeNullableFilter<"goals"> | Date | string | null
    created_at?: DateTimeNullableFilter<"goals"> | Date | string | null
    users?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
  }, "goal_id">

  export type goalsOrderByWithAggregationInput = {
    goal_id?: SortOrder
    user_id?: SortOrderInput | SortOrder
    goal_type?: SortOrderInput | SortOrder
    target_weight?: SortOrderInput | SortOrder
    target_date?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: goalsCountOrderByAggregateInput
    _avg?: goalsAvgOrderByAggregateInput
    _max?: goalsMaxOrderByAggregateInput
    _min?: goalsMinOrderByAggregateInput
    _sum?: goalsSumOrderByAggregateInput
  }

  export type goalsScalarWhereWithAggregatesInput = {
    AND?: goalsScalarWhereWithAggregatesInput | goalsScalarWhereWithAggregatesInput[]
    OR?: goalsScalarWhereWithAggregatesInput[]
    NOT?: goalsScalarWhereWithAggregatesInput | goalsScalarWhereWithAggregatesInput[]
    goal_id?: IntWithAggregatesFilter<"goals"> | number
    user_id?: IntNullableWithAggregatesFilter<"goals"> | number | null
    goal_type?: StringNullableWithAggregatesFilter<"goals"> | string | null
    target_weight?: DecimalNullableWithAggregatesFilter<"goals"> | Decimal | DecimalJsLike | number | string | null
    target_date?: DateTimeNullableWithAggregatesFilter<"goals"> | Date | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"goals"> | Date | string | null
  }

  export type healthconditionsWhereInput = {
    AND?: healthconditionsWhereInput | healthconditionsWhereInput[]
    OR?: healthconditionsWhereInput[]
    NOT?: healthconditionsWhereInput | healthconditionsWhereInput[]
    condition_id?: IntFilter<"healthconditions"> | number
    user_id?: IntNullableFilter<"healthconditions"> | number | null
    condition_name?: StringNullableFilter<"healthconditions"> | string | null
    severity?: StringNullableFilter<"healthconditions"> | string | null
    diagnosed_at?: DateTimeNullableFilter<"healthconditions"> | Date | string | null
    users?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
  }

  export type healthconditionsOrderByWithRelationInput = {
    condition_id?: SortOrder
    user_id?: SortOrderInput | SortOrder
    condition_name?: SortOrderInput | SortOrder
    severity?: SortOrderInput | SortOrder
    diagnosed_at?: SortOrderInput | SortOrder
    users?: usersOrderByWithRelationInput
    _relevance?: healthconditionsOrderByRelevanceInput
  }

  export type healthconditionsWhereUniqueInput = Prisma.AtLeast<{
    condition_id?: number
    AND?: healthconditionsWhereInput | healthconditionsWhereInput[]
    OR?: healthconditionsWhereInput[]
    NOT?: healthconditionsWhereInput | healthconditionsWhereInput[]
    user_id?: IntNullableFilter<"healthconditions"> | number | null
    condition_name?: StringNullableFilter<"healthconditions"> | string | null
    severity?: StringNullableFilter<"healthconditions"> | string | null
    diagnosed_at?: DateTimeNullableFilter<"healthconditions"> | Date | string | null
    users?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
  }, "condition_id">

  export type healthconditionsOrderByWithAggregationInput = {
    condition_id?: SortOrder
    user_id?: SortOrderInput | SortOrder
    condition_name?: SortOrderInput | SortOrder
    severity?: SortOrderInput | SortOrder
    diagnosed_at?: SortOrderInput | SortOrder
    _count?: healthconditionsCountOrderByAggregateInput
    _avg?: healthconditionsAvgOrderByAggregateInput
    _max?: healthconditionsMaxOrderByAggregateInput
    _min?: healthconditionsMinOrderByAggregateInput
    _sum?: healthconditionsSumOrderByAggregateInput
  }

  export type healthconditionsScalarWhereWithAggregatesInput = {
    AND?: healthconditionsScalarWhereWithAggregatesInput | healthconditionsScalarWhereWithAggregatesInput[]
    OR?: healthconditionsScalarWhereWithAggregatesInput[]
    NOT?: healthconditionsScalarWhereWithAggregatesInput | healthconditionsScalarWhereWithAggregatesInput[]
    condition_id?: IntWithAggregatesFilter<"healthconditions"> | number
    user_id?: IntNullableWithAggregatesFilter<"healthconditions"> | number | null
    condition_name?: StringNullableWithAggregatesFilter<"healthconditions"> | string | null
    severity?: StringNullableWithAggregatesFilter<"healthconditions"> | string | null
    diagnosed_at?: DateTimeNullableWithAggregatesFilter<"healthconditions"> | Date | string | null
  }

  export type recommendationsWhereInput = {
    AND?: recommendationsWhereInput | recommendationsWhereInput[]
    OR?: recommendationsWhereInput[]
    NOT?: recommendationsWhereInput | recommendationsWhereInput[]
    rec_id?: IntFilter<"recommendations"> | number
    user_id?: IntNullableFilter<"recommendations"> | number | null
    rec_type?: StringNullableFilter<"recommendations"> | string | null
    description?: StringNullableFilter<"recommendations"> | string | null
    calories?: IntNullableFilter<"recommendations"> | number | null
    created_at?: DateTimeNullableFilter<"recommendations"> | Date | string | null
    users?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
  }

  export type recommendationsOrderByWithRelationInput = {
    rec_id?: SortOrder
    user_id?: SortOrderInput | SortOrder
    rec_type?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    calories?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    users?: usersOrderByWithRelationInput
    _relevance?: recommendationsOrderByRelevanceInput
  }

  export type recommendationsWhereUniqueInput = Prisma.AtLeast<{
    rec_id?: number
    AND?: recommendationsWhereInput | recommendationsWhereInput[]
    OR?: recommendationsWhereInput[]
    NOT?: recommendationsWhereInput | recommendationsWhereInput[]
    user_id?: IntNullableFilter<"recommendations"> | number | null
    rec_type?: StringNullableFilter<"recommendations"> | string | null
    description?: StringNullableFilter<"recommendations"> | string | null
    calories?: IntNullableFilter<"recommendations"> | number | null
    created_at?: DateTimeNullableFilter<"recommendations"> | Date | string | null
    users?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
  }, "rec_id">

  export type recommendationsOrderByWithAggregationInput = {
    rec_id?: SortOrder
    user_id?: SortOrderInput | SortOrder
    rec_type?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    calories?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: recommendationsCountOrderByAggregateInput
    _avg?: recommendationsAvgOrderByAggregateInput
    _max?: recommendationsMaxOrderByAggregateInput
    _min?: recommendationsMinOrderByAggregateInput
    _sum?: recommendationsSumOrderByAggregateInput
  }

  export type recommendationsScalarWhereWithAggregatesInput = {
    AND?: recommendationsScalarWhereWithAggregatesInput | recommendationsScalarWhereWithAggregatesInput[]
    OR?: recommendationsScalarWhereWithAggregatesInput[]
    NOT?: recommendationsScalarWhereWithAggregatesInput | recommendationsScalarWhereWithAggregatesInput[]
    rec_id?: IntWithAggregatesFilter<"recommendations"> | number
    user_id?: IntNullableWithAggregatesFilter<"recommendations"> | number | null
    rec_type?: StringNullableWithAggregatesFilter<"recommendations"> | string | null
    description?: StringNullableWithAggregatesFilter<"recommendations"> | string | null
    calories?: IntNullableWithAggregatesFilter<"recommendations"> | number | null
    created_at?: DateTimeNullableWithAggregatesFilter<"recommendations"> | Date | string | null
  }

  export type usermetricsWhereInput = {
    AND?: usermetricsWhereInput | usermetricsWhereInput[]
    OR?: usermetricsWhereInput[]
    NOT?: usermetricsWhereInput | usermetricsWhereInput[]
    metric_id?: IntFilter<"usermetrics"> | number
    user_id?: IntNullableFilter<"usermetrics"> | number | null
    weight?: DecimalNullableFilter<"usermetrics"> | Decimal | DecimalJsLike | number | string | null
    height?: DecimalNullableFilter<"usermetrics"> | Decimal | DecimalJsLike | number | string | null
    bmi?: DecimalNullableFilter<"usermetrics"> | Decimal | DecimalJsLike | number | string | null
    recorded_at?: DateTimeNullableFilter<"usermetrics"> | Date | string | null
    users?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
  }

  export type usermetricsOrderByWithRelationInput = {
    metric_id?: SortOrder
    user_id?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    bmi?: SortOrderInput | SortOrder
    recorded_at?: SortOrderInput | SortOrder
    users?: usersOrderByWithRelationInput
  }

  export type usermetricsWhereUniqueInput = Prisma.AtLeast<{
    metric_id?: number
    AND?: usermetricsWhereInput | usermetricsWhereInput[]
    OR?: usermetricsWhereInput[]
    NOT?: usermetricsWhereInput | usermetricsWhereInput[]
    user_id?: IntNullableFilter<"usermetrics"> | number | null
    weight?: DecimalNullableFilter<"usermetrics"> | Decimal | DecimalJsLike | number | string | null
    height?: DecimalNullableFilter<"usermetrics"> | Decimal | DecimalJsLike | number | string | null
    bmi?: DecimalNullableFilter<"usermetrics"> | Decimal | DecimalJsLike | number | string | null
    recorded_at?: DateTimeNullableFilter<"usermetrics"> | Date | string | null
    users?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
  }, "metric_id">

  export type usermetricsOrderByWithAggregationInput = {
    metric_id?: SortOrder
    user_id?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    bmi?: SortOrderInput | SortOrder
    recorded_at?: SortOrderInput | SortOrder
    _count?: usermetricsCountOrderByAggregateInput
    _avg?: usermetricsAvgOrderByAggregateInput
    _max?: usermetricsMaxOrderByAggregateInput
    _min?: usermetricsMinOrderByAggregateInput
    _sum?: usermetricsSumOrderByAggregateInput
  }

  export type usermetricsScalarWhereWithAggregatesInput = {
    AND?: usermetricsScalarWhereWithAggregatesInput | usermetricsScalarWhereWithAggregatesInput[]
    OR?: usermetricsScalarWhereWithAggregatesInput[]
    NOT?: usermetricsScalarWhereWithAggregatesInput | usermetricsScalarWhereWithAggregatesInput[]
    metric_id?: IntWithAggregatesFilter<"usermetrics"> | number
    user_id?: IntNullableWithAggregatesFilter<"usermetrics"> | number | null
    weight?: DecimalNullableWithAggregatesFilter<"usermetrics"> | Decimal | DecimalJsLike | number | string | null
    height?: DecimalNullableWithAggregatesFilter<"usermetrics"> | Decimal | DecimalJsLike | number | string | null
    bmi?: DecimalNullableWithAggregatesFilter<"usermetrics"> | Decimal | DecimalJsLike | number | string | null
    recorded_at?: DateTimeNullableWithAggregatesFilter<"usermetrics"> | Date | string | null
  }

  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    user_id?: IntFilter<"users"> | number
    name?: StringNullableFilter<"users"> | string | null
    password_hash?: StringFilter<"users"> | string
    email?: StringNullableFilter<"users"> | string | null
    date_of_birth?: DateTimeNullableFilter<"users"> | Date | string | null
    gender?: StringNullableFilter<"users"> | string | null
    last_login?: DateTimeNullableFilter<"users"> | Date | string | null
    created_at?: DateTimeNullableFilter<"users"> | Date | string | null
    goals?: GoalsListRelationFilter
    healthconditions?: HealthconditionsListRelationFilter
    recommendations?: RecommendationsListRelationFilter
    usermetrics?: UsermetricsListRelationFilter
  }

  export type usersOrderByWithRelationInput = {
    user_id?: SortOrder
    name?: SortOrderInput | SortOrder
    password_hash?: SortOrder
    email?: SortOrderInput | SortOrder
    date_of_birth?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    last_login?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    goals?: goalsOrderByRelationAggregateInput
    healthconditions?: healthconditionsOrderByRelationAggregateInput
    recommendations?: recommendationsOrderByRelationAggregateInput
    usermetrics?: usermetricsOrderByRelationAggregateInput
    _relevance?: usersOrderByRelevanceInput
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    user_id?: number
    email?: string
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    name?: StringNullableFilter<"users"> | string | null
    password_hash?: StringFilter<"users"> | string
    date_of_birth?: DateTimeNullableFilter<"users"> | Date | string | null
    gender?: StringNullableFilter<"users"> | string | null
    last_login?: DateTimeNullableFilter<"users"> | Date | string | null
    created_at?: DateTimeNullableFilter<"users"> | Date | string | null
    goals?: GoalsListRelationFilter
    healthconditions?: HealthconditionsListRelationFilter
    recommendations?: RecommendationsListRelationFilter
    usermetrics?: UsermetricsListRelationFilter
  }, "user_id" | "email">

  export type usersOrderByWithAggregationInput = {
    user_id?: SortOrder
    name?: SortOrderInput | SortOrder
    password_hash?: SortOrder
    email?: SortOrderInput | SortOrder
    date_of_birth?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    last_login?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    user_id?: IntWithAggregatesFilter<"users"> | number
    name?: StringNullableWithAggregatesFilter<"users"> | string | null
    password_hash?: StringWithAggregatesFilter<"users"> | string
    email?: StringNullableWithAggregatesFilter<"users"> | string | null
    date_of_birth?: DateTimeNullableWithAggregatesFilter<"users"> | Date | string | null
    gender?: StringNullableWithAggregatesFilter<"users"> | string | null
    last_login?: DateTimeNullableWithAggregatesFilter<"users"> | Date | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"users"> | Date | string | null
  }

  export type goalsCreateInput = {
    goal_type?: string | null
    target_weight?: Decimal | DecimalJsLike | number | string | null
    target_date?: Date | string | null
    created_at?: Date | string | null
    users?: usersCreateNestedOneWithoutGoalsInput
  }

  export type goalsUncheckedCreateInput = {
    goal_id?: number
    user_id?: number | null
    goal_type?: string | null
    target_weight?: Decimal | DecimalJsLike | number | string | null
    target_date?: Date | string | null
    created_at?: Date | string | null
  }

  export type goalsUpdateInput = {
    goal_type?: NullableStringFieldUpdateOperationsInput | string | null
    target_weight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    target_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: usersUpdateOneWithoutGoalsNestedInput
  }

  export type goalsUncheckedUpdateInput = {
    goal_id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    goal_type?: NullableStringFieldUpdateOperationsInput | string | null
    target_weight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    target_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type goalsCreateManyInput = {
    goal_id?: number
    user_id?: number | null
    goal_type?: string | null
    target_weight?: Decimal | DecimalJsLike | number | string | null
    target_date?: Date | string | null
    created_at?: Date | string | null
  }

  export type goalsUpdateManyMutationInput = {
    goal_type?: NullableStringFieldUpdateOperationsInput | string | null
    target_weight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    target_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type goalsUncheckedUpdateManyInput = {
    goal_id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    goal_type?: NullableStringFieldUpdateOperationsInput | string | null
    target_weight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    target_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type healthconditionsCreateInput = {
    condition_name?: string | null
    severity?: string | null
    diagnosed_at?: Date | string | null
    users?: usersCreateNestedOneWithoutHealthconditionsInput
  }

  export type healthconditionsUncheckedCreateInput = {
    condition_id?: number
    user_id?: number | null
    condition_name?: string | null
    severity?: string | null
    diagnosed_at?: Date | string | null
  }

  export type healthconditionsUpdateInput = {
    condition_name?: NullableStringFieldUpdateOperationsInput | string | null
    severity?: NullableStringFieldUpdateOperationsInput | string | null
    diagnosed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: usersUpdateOneWithoutHealthconditionsNestedInput
  }

  export type healthconditionsUncheckedUpdateInput = {
    condition_id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    condition_name?: NullableStringFieldUpdateOperationsInput | string | null
    severity?: NullableStringFieldUpdateOperationsInput | string | null
    diagnosed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type healthconditionsCreateManyInput = {
    condition_id?: number
    user_id?: number | null
    condition_name?: string | null
    severity?: string | null
    diagnosed_at?: Date | string | null
  }

  export type healthconditionsUpdateManyMutationInput = {
    condition_name?: NullableStringFieldUpdateOperationsInput | string | null
    severity?: NullableStringFieldUpdateOperationsInput | string | null
    diagnosed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type healthconditionsUncheckedUpdateManyInput = {
    condition_id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    condition_name?: NullableStringFieldUpdateOperationsInput | string | null
    severity?: NullableStringFieldUpdateOperationsInput | string | null
    diagnosed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type recommendationsCreateInput = {
    rec_type?: string | null
    description?: string | null
    calories?: number | null
    created_at?: Date | string | null
    users?: usersCreateNestedOneWithoutRecommendationsInput
  }

  export type recommendationsUncheckedCreateInput = {
    rec_id?: number
    user_id?: number | null
    rec_type?: string | null
    description?: string | null
    calories?: number | null
    created_at?: Date | string | null
  }

  export type recommendationsUpdateInput = {
    rec_type?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    calories?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: usersUpdateOneWithoutRecommendationsNestedInput
  }

  export type recommendationsUncheckedUpdateInput = {
    rec_id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    rec_type?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    calories?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type recommendationsCreateManyInput = {
    rec_id?: number
    user_id?: number | null
    rec_type?: string | null
    description?: string | null
    calories?: number | null
    created_at?: Date | string | null
  }

  export type recommendationsUpdateManyMutationInput = {
    rec_type?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    calories?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type recommendationsUncheckedUpdateManyInput = {
    rec_id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    rec_type?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    calories?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usermetricsCreateInput = {
    weight?: Decimal | DecimalJsLike | number | string | null
    height?: Decimal | DecimalJsLike | number | string | null
    bmi?: Decimal | DecimalJsLike | number | string | null
    recorded_at?: Date | string | null
    users?: usersCreateNestedOneWithoutUsermetricsInput
  }

  export type usermetricsUncheckedCreateInput = {
    metric_id?: number
    user_id?: number | null
    weight?: Decimal | DecimalJsLike | number | string | null
    height?: Decimal | DecimalJsLike | number | string | null
    bmi?: Decimal | DecimalJsLike | number | string | null
    recorded_at?: Date | string | null
  }

  export type usermetricsUpdateInput = {
    weight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    height?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    bmi?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    recorded_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: usersUpdateOneWithoutUsermetricsNestedInput
  }

  export type usermetricsUncheckedUpdateInput = {
    metric_id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    height?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    bmi?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    recorded_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usermetricsCreateManyInput = {
    metric_id?: number
    user_id?: number | null
    weight?: Decimal | DecimalJsLike | number | string | null
    height?: Decimal | DecimalJsLike | number | string | null
    bmi?: Decimal | DecimalJsLike | number | string | null
    recorded_at?: Date | string | null
  }

  export type usermetricsUpdateManyMutationInput = {
    weight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    height?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    bmi?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    recorded_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usermetricsUncheckedUpdateManyInput = {
    metric_id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    height?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    bmi?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    recorded_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usersCreateInput = {
    name?: string | null
    password_hash: string
    email?: string | null
    date_of_birth?: Date | string | null
    gender?: string | null
    last_login?: Date | string | null
    created_at?: Date | string | null
    goals?: goalsCreateNestedManyWithoutUsersInput
    healthconditions?: healthconditionsCreateNestedManyWithoutUsersInput
    recommendations?: recommendationsCreateNestedManyWithoutUsersInput
    usermetrics?: usermetricsCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateInput = {
    user_id?: number
    name?: string | null
    password_hash: string
    email?: string | null
    date_of_birth?: Date | string | null
    gender?: string | null
    last_login?: Date | string | null
    created_at?: Date | string | null
    goals?: goalsUncheckedCreateNestedManyWithoutUsersInput
    healthconditions?: healthconditionsUncheckedCreateNestedManyWithoutUsersInput
    recommendations?: recommendationsUncheckedCreateNestedManyWithoutUsersInput
    usermetrics?: usermetricsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password_hash?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    goals?: goalsUpdateManyWithoutUsersNestedInput
    healthconditions?: healthconditionsUpdateManyWithoutUsersNestedInput
    recommendations?: recommendationsUpdateManyWithoutUsersNestedInput
    usermetrics?: usermetricsUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password_hash?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    goals?: goalsUncheckedUpdateManyWithoutUsersNestedInput
    healthconditions?: healthconditionsUncheckedUpdateManyWithoutUsersNestedInput
    recommendations?: recommendationsUncheckedUpdateManyWithoutUsersNestedInput
    usermetrics?: usermetricsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type usersCreateManyInput = {
    user_id?: number
    name?: string | null
    password_hash: string
    email?: string | null
    date_of_birth?: Date | string | null
    gender?: string | null
    last_login?: Date | string | null
    created_at?: Date | string | null
  }

  export type usersUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password_hash?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usersUncheckedUpdateManyInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password_hash?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type UsersNullableScalarRelationFilter = {
    is?: usersWhereInput | null
    isNot?: usersWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type goalsOrderByRelevanceInput = {
    fields: goalsOrderByRelevanceFieldEnum | goalsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type goalsCountOrderByAggregateInput = {
    goal_id?: SortOrder
    user_id?: SortOrder
    goal_type?: SortOrder
    target_weight?: SortOrder
    target_date?: SortOrder
    created_at?: SortOrder
  }

  export type goalsAvgOrderByAggregateInput = {
    goal_id?: SortOrder
    user_id?: SortOrder
    target_weight?: SortOrder
  }

  export type goalsMaxOrderByAggregateInput = {
    goal_id?: SortOrder
    user_id?: SortOrder
    goal_type?: SortOrder
    target_weight?: SortOrder
    target_date?: SortOrder
    created_at?: SortOrder
  }

  export type goalsMinOrderByAggregateInput = {
    goal_id?: SortOrder
    user_id?: SortOrder
    goal_type?: SortOrder
    target_weight?: SortOrder
    target_date?: SortOrder
    created_at?: SortOrder
  }

  export type goalsSumOrderByAggregateInput = {
    goal_id?: SortOrder
    user_id?: SortOrder
    target_weight?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type healthconditionsOrderByRelevanceInput = {
    fields: healthconditionsOrderByRelevanceFieldEnum | healthconditionsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type healthconditionsCountOrderByAggregateInput = {
    condition_id?: SortOrder
    user_id?: SortOrder
    condition_name?: SortOrder
    severity?: SortOrder
    diagnosed_at?: SortOrder
  }

  export type healthconditionsAvgOrderByAggregateInput = {
    condition_id?: SortOrder
    user_id?: SortOrder
  }

  export type healthconditionsMaxOrderByAggregateInput = {
    condition_id?: SortOrder
    user_id?: SortOrder
    condition_name?: SortOrder
    severity?: SortOrder
    diagnosed_at?: SortOrder
  }

  export type healthconditionsMinOrderByAggregateInput = {
    condition_id?: SortOrder
    user_id?: SortOrder
    condition_name?: SortOrder
    severity?: SortOrder
    diagnosed_at?: SortOrder
  }

  export type healthconditionsSumOrderByAggregateInput = {
    condition_id?: SortOrder
    user_id?: SortOrder
  }

  export type recommendationsOrderByRelevanceInput = {
    fields: recommendationsOrderByRelevanceFieldEnum | recommendationsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type recommendationsCountOrderByAggregateInput = {
    rec_id?: SortOrder
    user_id?: SortOrder
    rec_type?: SortOrder
    description?: SortOrder
    calories?: SortOrder
    created_at?: SortOrder
  }

  export type recommendationsAvgOrderByAggregateInput = {
    rec_id?: SortOrder
    user_id?: SortOrder
    calories?: SortOrder
  }

  export type recommendationsMaxOrderByAggregateInput = {
    rec_id?: SortOrder
    user_id?: SortOrder
    rec_type?: SortOrder
    description?: SortOrder
    calories?: SortOrder
    created_at?: SortOrder
  }

  export type recommendationsMinOrderByAggregateInput = {
    rec_id?: SortOrder
    user_id?: SortOrder
    rec_type?: SortOrder
    description?: SortOrder
    calories?: SortOrder
    created_at?: SortOrder
  }

  export type recommendationsSumOrderByAggregateInput = {
    rec_id?: SortOrder
    user_id?: SortOrder
    calories?: SortOrder
  }

  export type usermetricsCountOrderByAggregateInput = {
    metric_id?: SortOrder
    user_id?: SortOrder
    weight?: SortOrder
    height?: SortOrder
    bmi?: SortOrder
    recorded_at?: SortOrder
  }

  export type usermetricsAvgOrderByAggregateInput = {
    metric_id?: SortOrder
    user_id?: SortOrder
    weight?: SortOrder
    height?: SortOrder
    bmi?: SortOrder
  }

  export type usermetricsMaxOrderByAggregateInput = {
    metric_id?: SortOrder
    user_id?: SortOrder
    weight?: SortOrder
    height?: SortOrder
    bmi?: SortOrder
    recorded_at?: SortOrder
  }

  export type usermetricsMinOrderByAggregateInput = {
    metric_id?: SortOrder
    user_id?: SortOrder
    weight?: SortOrder
    height?: SortOrder
    bmi?: SortOrder
    recorded_at?: SortOrder
  }

  export type usermetricsSumOrderByAggregateInput = {
    metric_id?: SortOrder
    user_id?: SortOrder
    weight?: SortOrder
    height?: SortOrder
    bmi?: SortOrder
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type GoalsListRelationFilter = {
    every?: goalsWhereInput
    some?: goalsWhereInput
    none?: goalsWhereInput
  }

  export type HealthconditionsListRelationFilter = {
    every?: healthconditionsWhereInput
    some?: healthconditionsWhereInput
    none?: healthconditionsWhereInput
  }

  export type RecommendationsListRelationFilter = {
    every?: recommendationsWhereInput
    some?: recommendationsWhereInput
    none?: recommendationsWhereInput
  }

  export type UsermetricsListRelationFilter = {
    every?: usermetricsWhereInput
    some?: usermetricsWhereInput
    none?: usermetricsWhereInput
  }

  export type goalsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type healthconditionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type recommendationsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usermetricsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersOrderByRelevanceInput = {
    fields: usersOrderByRelevanceFieldEnum | usersOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type usersCountOrderByAggregateInput = {
    user_id?: SortOrder
    name?: SortOrder
    password_hash?: SortOrder
    email?: SortOrder
    date_of_birth?: SortOrder
    gender?: SortOrder
    last_login?: SortOrder
    created_at?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    user_id?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    user_id?: SortOrder
    name?: SortOrder
    password_hash?: SortOrder
    email?: SortOrder
    date_of_birth?: SortOrder
    gender?: SortOrder
    last_login?: SortOrder
    created_at?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    user_id?: SortOrder
    name?: SortOrder
    password_hash?: SortOrder
    email?: SortOrder
    date_of_birth?: SortOrder
    gender?: SortOrder
    last_login?: SortOrder
    created_at?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    user_id?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type usersCreateNestedOneWithoutGoalsInput = {
    create?: XOR<usersCreateWithoutGoalsInput, usersUncheckedCreateWithoutGoalsInput>
    connectOrCreate?: usersCreateOrConnectWithoutGoalsInput
    connect?: usersWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type usersUpdateOneWithoutGoalsNestedInput = {
    create?: XOR<usersCreateWithoutGoalsInput, usersUncheckedCreateWithoutGoalsInput>
    connectOrCreate?: usersCreateOrConnectWithoutGoalsInput
    upsert?: usersUpsertWithoutGoalsInput
    disconnect?: usersWhereInput | boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutGoalsInput, usersUpdateWithoutGoalsInput>, usersUncheckedUpdateWithoutGoalsInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type usersCreateNestedOneWithoutHealthconditionsInput = {
    create?: XOR<usersCreateWithoutHealthconditionsInput, usersUncheckedCreateWithoutHealthconditionsInput>
    connectOrCreate?: usersCreateOrConnectWithoutHealthconditionsInput
    connect?: usersWhereUniqueInput
  }

  export type usersUpdateOneWithoutHealthconditionsNestedInput = {
    create?: XOR<usersCreateWithoutHealthconditionsInput, usersUncheckedCreateWithoutHealthconditionsInput>
    connectOrCreate?: usersCreateOrConnectWithoutHealthconditionsInput
    upsert?: usersUpsertWithoutHealthconditionsInput
    disconnect?: usersWhereInput | boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutHealthconditionsInput, usersUpdateWithoutHealthconditionsInput>, usersUncheckedUpdateWithoutHealthconditionsInput>
  }

  export type usersCreateNestedOneWithoutRecommendationsInput = {
    create?: XOR<usersCreateWithoutRecommendationsInput, usersUncheckedCreateWithoutRecommendationsInput>
    connectOrCreate?: usersCreateOrConnectWithoutRecommendationsInput
    connect?: usersWhereUniqueInput
  }

  export type usersUpdateOneWithoutRecommendationsNestedInput = {
    create?: XOR<usersCreateWithoutRecommendationsInput, usersUncheckedCreateWithoutRecommendationsInput>
    connectOrCreate?: usersCreateOrConnectWithoutRecommendationsInput
    upsert?: usersUpsertWithoutRecommendationsInput
    disconnect?: usersWhereInput | boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutRecommendationsInput, usersUpdateWithoutRecommendationsInput>, usersUncheckedUpdateWithoutRecommendationsInput>
  }

  export type usersCreateNestedOneWithoutUsermetricsInput = {
    create?: XOR<usersCreateWithoutUsermetricsInput, usersUncheckedCreateWithoutUsermetricsInput>
    connectOrCreate?: usersCreateOrConnectWithoutUsermetricsInput
    connect?: usersWhereUniqueInput
  }

  export type usersUpdateOneWithoutUsermetricsNestedInput = {
    create?: XOR<usersCreateWithoutUsermetricsInput, usersUncheckedCreateWithoutUsermetricsInput>
    connectOrCreate?: usersCreateOrConnectWithoutUsermetricsInput
    upsert?: usersUpsertWithoutUsermetricsInput
    disconnect?: usersWhereInput | boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutUsermetricsInput, usersUpdateWithoutUsermetricsInput>, usersUncheckedUpdateWithoutUsermetricsInput>
  }

  export type goalsCreateNestedManyWithoutUsersInput = {
    create?: XOR<goalsCreateWithoutUsersInput, goalsUncheckedCreateWithoutUsersInput> | goalsCreateWithoutUsersInput[] | goalsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: goalsCreateOrConnectWithoutUsersInput | goalsCreateOrConnectWithoutUsersInput[]
    createMany?: goalsCreateManyUsersInputEnvelope
    connect?: goalsWhereUniqueInput | goalsWhereUniqueInput[]
  }

  export type healthconditionsCreateNestedManyWithoutUsersInput = {
    create?: XOR<healthconditionsCreateWithoutUsersInput, healthconditionsUncheckedCreateWithoutUsersInput> | healthconditionsCreateWithoutUsersInput[] | healthconditionsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: healthconditionsCreateOrConnectWithoutUsersInput | healthconditionsCreateOrConnectWithoutUsersInput[]
    createMany?: healthconditionsCreateManyUsersInputEnvelope
    connect?: healthconditionsWhereUniqueInput | healthconditionsWhereUniqueInput[]
  }

  export type recommendationsCreateNestedManyWithoutUsersInput = {
    create?: XOR<recommendationsCreateWithoutUsersInput, recommendationsUncheckedCreateWithoutUsersInput> | recommendationsCreateWithoutUsersInput[] | recommendationsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: recommendationsCreateOrConnectWithoutUsersInput | recommendationsCreateOrConnectWithoutUsersInput[]
    createMany?: recommendationsCreateManyUsersInputEnvelope
    connect?: recommendationsWhereUniqueInput | recommendationsWhereUniqueInput[]
  }

  export type usermetricsCreateNestedManyWithoutUsersInput = {
    create?: XOR<usermetricsCreateWithoutUsersInput, usermetricsUncheckedCreateWithoutUsersInput> | usermetricsCreateWithoutUsersInput[] | usermetricsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: usermetricsCreateOrConnectWithoutUsersInput | usermetricsCreateOrConnectWithoutUsersInput[]
    createMany?: usermetricsCreateManyUsersInputEnvelope
    connect?: usermetricsWhereUniqueInput | usermetricsWhereUniqueInput[]
  }

  export type goalsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<goalsCreateWithoutUsersInput, goalsUncheckedCreateWithoutUsersInput> | goalsCreateWithoutUsersInput[] | goalsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: goalsCreateOrConnectWithoutUsersInput | goalsCreateOrConnectWithoutUsersInput[]
    createMany?: goalsCreateManyUsersInputEnvelope
    connect?: goalsWhereUniqueInput | goalsWhereUniqueInput[]
  }

  export type healthconditionsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<healthconditionsCreateWithoutUsersInput, healthconditionsUncheckedCreateWithoutUsersInput> | healthconditionsCreateWithoutUsersInput[] | healthconditionsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: healthconditionsCreateOrConnectWithoutUsersInput | healthconditionsCreateOrConnectWithoutUsersInput[]
    createMany?: healthconditionsCreateManyUsersInputEnvelope
    connect?: healthconditionsWhereUniqueInput | healthconditionsWhereUniqueInput[]
  }

  export type recommendationsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<recommendationsCreateWithoutUsersInput, recommendationsUncheckedCreateWithoutUsersInput> | recommendationsCreateWithoutUsersInput[] | recommendationsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: recommendationsCreateOrConnectWithoutUsersInput | recommendationsCreateOrConnectWithoutUsersInput[]
    createMany?: recommendationsCreateManyUsersInputEnvelope
    connect?: recommendationsWhereUniqueInput | recommendationsWhereUniqueInput[]
  }

  export type usermetricsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<usermetricsCreateWithoutUsersInput, usermetricsUncheckedCreateWithoutUsersInput> | usermetricsCreateWithoutUsersInput[] | usermetricsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: usermetricsCreateOrConnectWithoutUsersInput | usermetricsCreateOrConnectWithoutUsersInput[]
    createMany?: usermetricsCreateManyUsersInputEnvelope
    connect?: usermetricsWhereUniqueInput | usermetricsWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type goalsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<goalsCreateWithoutUsersInput, goalsUncheckedCreateWithoutUsersInput> | goalsCreateWithoutUsersInput[] | goalsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: goalsCreateOrConnectWithoutUsersInput | goalsCreateOrConnectWithoutUsersInput[]
    upsert?: goalsUpsertWithWhereUniqueWithoutUsersInput | goalsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: goalsCreateManyUsersInputEnvelope
    set?: goalsWhereUniqueInput | goalsWhereUniqueInput[]
    disconnect?: goalsWhereUniqueInput | goalsWhereUniqueInput[]
    delete?: goalsWhereUniqueInput | goalsWhereUniqueInput[]
    connect?: goalsWhereUniqueInput | goalsWhereUniqueInput[]
    update?: goalsUpdateWithWhereUniqueWithoutUsersInput | goalsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: goalsUpdateManyWithWhereWithoutUsersInput | goalsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: goalsScalarWhereInput | goalsScalarWhereInput[]
  }

  export type healthconditionsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<healthconditionsCreateWithoutUsersInput, healthconditionsUncheckedCreateWithoutUsersInput> | healthconditionsCreateWithoutUsersInput[] | healthconditionsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: healthconditionsCreateOrConnectWithoutUsersInput | healthconditionsCreateOrConnectWithoutUsersInput[]
    upsert?: healthconditionsUpsertWithWhereUniqueWithoutUsersInput | healthconditionsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: healthconditionsCreateManyUsersInputEnvelope
    set?: healthconditionsWhereUniqueInput | healthconditionsWhereUniqueInput[]
    disconnect?: healthconditionsWhereUniqueInput | healthconditionsWhereUniqueInput[]
    delete?: healthconditionsWhereUniqueInput | healthconditionsWhereUniqueInput[]
    connect?: healthconditionsWhereUniqueInput | healthconditionsWhereUniqueInput[]
    update?: healthconditionsUpdateWithWhereUniqueWithoutUsersInput | healthconditionsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: healthconditionsUpdateManyWithWhereWithoutUsersInput | healthconditionsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: healthconditionsScalarWhereInput | healthconditionsScalarWhereInput[]
  }

  export type recommendationsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<recommendationsCreateWithoutUsersInput, recommendationsUncheckedCreateWithoutUsersInput> | recommendationsCreateWithoutUsersInput[] | recommendationsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: recommendationsCreateOrConnectWithoutUsersInput | recommendationsCreateOrConnectWithoutUsersInput[]
    upsert?: recommendationsUpsertWithWhereUniqueWithoutUsersInput | recommendationsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: recommendationsCreateManyUsersInputEnvelope
    set?: recommendationsWhereUniqueInput | recommendationsWhereUniqueInput[]
    disconnect?: recommendationsWhereUniqueInput | recommendationsWhereUniqueInput[]
    delete?: recommendationsWhereUniqueInput | recommendationsWhereUniqueInput[]
    connect?: recommendationsWhereUniqueInput | recommendationsWhereUniqueInput[]
    update?: recommendationsUpdateWithWhereUniqueWithoutUsersInput | recommendationsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: recommendationsUpdateManyWithWhereWithoutUsersInput | recommendationsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: recommendationsScalarWhereInput | recommendationsScalarWhereInput[]
  }

  export type usermetricsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<usermetricsCreateWithoutUsersInput, usermetricsUncheckedCreateWithoutUsersInput> | usermetricsCreateWithoutUsersInput[] | usermetricsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: usermetricsCreateOrConnectWithoutUsersInput | usermetricsCreateOrConnectWithoutUsersInput[]
    upsert?: usermetricsUpsertWithWhereUniqueWithoutUsersInput | usermetricsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: usermetricsCreateManyUsersInputEnvelope
    set?: usermetricsWhereUniqueInput | usermetricsWhereUniqueInput[]
    disconnect?: usermetricsWhereUniqueInput | usermetricsWhereUniqueInput[]
    delete?: usermetricsWhereUniqueInput | usermetricsWhereUniqueInput[]
    connect?: usermetricsWhereUniqueInput | usermetricsWhereUniqueInput[]
    update?: usermetricsUpdateWithWhereUniqueWithoutUsersInput | usermetricsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: usermetricsUpdateManyWithWhereWithoutUsersInput | usermetricsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: usermetricsScalarWhereInput | usermetricsScalarWhereInput[]
  }

  export type goalsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<goalsCreateWithoutUsersInput, goalsUncheckedCreateWithoutUsersInput> | goalsCreateWithoutUsersInput[] | goalsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: goalsCreateOrConnectWithoutUsersInput | goalsCreateOrConnectWithoutUsersInput[]
    upsert?: goalsUpsertWithWhereUniqueWithoutUsersInput | goalsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: goalsCreateManyUsersInputEnvelope
    set?: goalsWhereUniqueInput | goalsWhereUniqueInput[]
    disconnect?: goalsWhereUniqueInput | goalsWhereUniqueInput[]
    delete?: goalsWhereUniqueInput | goalsWhereUniqueInput[]
    connect?: goalsWhereUniqueInput | goalsWhereUniqueInput[]
    update?: goalsUpdateWithWhereUniqueWithoutUsersInput | goalsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: goalsUpdateManyWithWhereWithoutUsersInput | goalsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: goalsScalarWhereInput | goalsScalarWhereInput[]
  }

  export type healthconditionsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<healthconditionsCreateWithoutUsersInput, healthconditionsUncheckedCreateWithoutUsersInput> | healthconditionsCreateWithoutUsersInput[] | healthconditionsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: healthconditionsCreateOrConnectWithoutUsersInput | healthconditionsCreateOrConnectWithoutUsersInput[]
    upsert?: healthconditionsUpsertWithWhereUniqueWithoutUsersInput | healthconditionsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: healthconditionsCreateManyUsersInputEnvelope
    set?: healthconditionsWhereUniqueInput | healthconditionsWhereUniqueInput[]
    disconnect?: healthconditionsWhereUniqueInput | healthconditionsWhereUniqueInput[]
    delete?: healthconditionsWhereUniqueInput | healthconditionsWhereUniqueInput[]
    connect?: healthconditionsWhereUniqueInput | healthconditionsWhereUniqueInput[]
    update?: healthconditionsUpdateWithWhereUniqueWithoutUsersInput | healthconditionsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: healthconditionsUpdateManyWithWhereWithoutUsersInput | healthconditionsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: healthconditionsScalarWhereInput | healthconditionsScalarWhereInput[]
  }

  export type recommendationsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<recommendationsCreateWithoutUsersInput, recommendationsUncheckedCreateWithoutUsersInput> | recommendationsCreateWithoutUsersInput[] | recommendationsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: recommendationsCreateOrConnectWithoutUsersInput | recommendationsCreateOrConnectWithoutUsersInput[]
    upsert?: recommendationsUpsertWithWhereUniqueWithoutUsersInput | recommendationsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: recommendationsCreateManyUsersInputEnvelope
    set?: recommendationsWhereUniqueInput | recommendationsWhereUniqueInput[]
    disconnect?: recommendationsWhereUniqueInput | recommendationsWhereUniqueInput[]
    delete?: recommendationsWhereUniqueInput | recommendationsWhereUniqueInput[]
    connect?: recommendationsWhereUniqueInput | recommendationsWhereUniqueInput[]
    update?: recommendationsUpdateWithWhereUniqueWithoutUsersInput | recommendationsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: recommendationsUpdateManyWithWhereWithoutUsersInput | recommendationsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: recommendationsScalarWhereInput | recommendationsScalarWhereInput[]
  }

  export type usermetricsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<usermetricsCreateWithoutUsersInput, usermetricsUncheckedCreateWithoutUsersInput> | usermetricsCreateWithoutUsersInput[] | usermetricsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: usermetricsCreateOrConnectWithoutUsersInput | usermetricsCreateOrConnectWithoutUsersInput[]
    upsert?: usermetricsUpsertWithWhereUniqueWithoutUsersInput | usermetricsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: usermetricsCreateManyUsersInputEnvelope
    set?: usermetricsWhereUniqueInput | usermetricsWhereUniqueInput[]
    disconnect?: usermetricsWhereUniqueInput | usermetricsWhereUniqueInput[]
    delete?: usermetricsWhereUniqueInput | usermetricsWhereUniqueInput[]
    connect?: usermetricsWhereUniqueInput | usermetricsWhereUniqueInput[]
    update?: usermetricsUpdateWithWhereUniqueWithoutUsersInput | usermetricsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: usermetricsUpdateManyWithWhereWithoutUsersInput | usermetricsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: usermetricsScalarWhereInput | usermetricsScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type usersCreateWithoutGoalsInput = {
    name?: string | null
    password_hash: string
    email?: string | null
    date_of_birth?: Date | string | null
    gender?: string | null
    last_login?: Date | string | null
    created_at?: Date | string | null
    healthconditions?: healthconditionsCreateNestedManyWithoutUsersInput
    recommendations?: recommendationsCreateNestedManyWithoutUsersInput
    usermetrics?: usermetricsCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutGoalsInput = {
    user_id?: number
    name?: string | null
    password_hash: string
    email?: string | null
    date_of_birth?: Date | string | null
    gender?: string | null
    last_login?: Date | string | null
    created_at?: Date | string | null
    healthconditions?: healthconditionsUncheckedCreateNestedManyWithoutUsersInput
    recommendations?: recommendationsUncheckedCreateNestedManyWithoutUsersInput
    usermetrics?: usermetricsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutGoalsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutGoalsInput, usersUncheckedCreateWithoutGoalsInput>
  }

  export type usersUpsertWithoutGoalsInput = {
    update: XOR<usersUpdateWithoutGoalsInput, usersUncheckedUpdateWithoutGoalsInput>
    create: XOR<usersCreateWithoutGoalsInput, usersUncheckedCreateWithoutGoalsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutGoalsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutGoalsInput, usersUncheckedUpdateWithoutGoalsInput>
  }

  export type usersUpdateWithoutGoalsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password_hash?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    healthconditions?: healthconditionsUpdateManyWithoutUsersNestedInput
    recommendations?: recommendationsUpdateManyWithoutUsersNestedInput
    usermetrics?: usermetricsUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutGoalsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password_hash?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    healthconditions?: healthconditionsUncheckedUpdateManyWithoutUsersNestedInput
    recommendations?: recommendationsUncheckedUpdateManyWithoutUsersNestedInput
    usermetrics?: usermetricsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type usersCreateWithoutHealthconditionsInput = {
    name?: string | null
    password_hash: string
    email?: string | null
    date_of_birth?: Date | string | null
    gender?: string | null
    last_login?: Date | string | null
    created_at?: Date | string | null
    goals?: goalsCreateNestedManyWithoutUsersInput
    recommendations?: recommendationsCreateNestedManyWithoutUsersInput
    usermetrics?: usermetricsCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutHealthconditionsInput = {
    user_id?: number
    name?: string | null
    password_hash: string
    email?: string | null
    date_of_birth?: Date | string | null
    gender?: string | null
    last_login?: Date | string | null
    created_at?: Date | string | null
    goals?: goalsUncheckedCreateNestedManyWithoutUsersInput
    recommendations?: recommendationsUncheckedCreateNestedManyWithoutUsersInput
    usermetrics?: usermetricsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutHealthconditionsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutHealthconditionsInput, usersUncheckedCreateWithoutHealthconditionsInput>
  }

  export type usersUpsertWithoutHealthconditionsInput = {
    update: XOR<usersUpdateWithoutHealthconditionsInput, usersUncheckedUpdateWithoutHealthconditionsInput>
    create: XOR<usersCreateWithoutHealthconditionsInput, usersUncheckedCreateWithoutHealthconditionsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutHealthconditionsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutHealthconditionsInput, usersUncheckedUpdateWithoutHealthconditionsInput>
  }

  export type usersUpdateWithoutHealthconditionsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password_hash?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    goals?: goalsUpdateManyWithoutUsersNestedInput
    recommendations?: recommendationsUpdateManyWithoutUsersNestedInput
    usermetrics?: usermetricsUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutHealthconditionsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password_hash?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    goals?: goalsUncheckedUpdateManyWithoutUsersNestedInput
    recommendations?: recommendationsUncheckedUpdateManyWithoutUsersNestedInput
    usermetrics?: usermetricsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type usersCreateWithoutRecommendationsInput = {
    name?: string | null
    password_hash: string
    email?: string | null
    date_of_birth?: Date | string | null
    gender?: string | null
    last_login?: Date | string | null
    created_at?: Date | string | null
    goals?: goalsCreateNestedManyWithoutUsersInput
    healthconditions?: healthconditionsCreateNestedManyWithoutUsersInput
    usermetrics?: usermetricsCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutRecommendationsInput = {
    user_id?: number
    name?: string | null
    password_hash: string
    email?: string | null
    date_of_birth?: Date | string | null
    gender?: string | null
    last_login?: Date | string | null
    created_at?: Date | string | null
    goals?: goalsUncheckedCreateNestedManyWithoutUsersInput
    healthconditions?: healthconditionsUncheckedCreateNestedManyWithoutUsersInput
    usermetrics?: usermetricsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutRecommendationsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutRecommendationsInput, usersUncheckedCreateWithoutRecommendationsInput>
  }

  export type usersUpsertWithoutRecommendationsInput = {
    update: XOR<usersUpdateWithoutRecommendationsInput, usersUncheckedUpdateWithoutRecommendationsInput>
    create: XOR<usersCreateWithoutRecommendationsInput, usersUncheckedCreateWithoutRecommendationsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutRecommendationsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutRecommendationsInput, usersUncheckedUpdateWithoutRecommendationsInput>
  }

  export type usersUpdateWithoutRecommendationsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password_hash?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    goals?: goalsUpdateManyWithoutUsersNestedInput
    healthconditions?: healthconditionsUpdateManyWithoutUsersNestedInput
    usermetrics?: usermetricsUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutRecommendationsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password_hash?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    goals?: goalsUncheckedUpdateManyWithoutUsersNestedInput
    healthconditions?: healthconditionsUncheckedUpdateManyWithoutUsersNestedInput
    usermetrics?: usermetricsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type usersCreateWithoutUsermetricsInput = {
    name?: string | null
    password_hash: string
    email?: string | null
    date_of_birth?: Date | string | null
    gender?: string | null
    last_login?: Date | string | null
    created_at?: Date | string | null
    goals?: goalsCreateNestedManyWithoutUsersInput
    healthconditions?: healthconditionsCreateNestedManyWithoutUsersInput
    recommendations?: recommendationsCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutUsermetricsInput = {
    user_id?: number
    name?: string | null
    password_hash: string
    email?: string | null
    date_of_birth?: Date | string | null
    gender?: string | null
    last_login?: Date | string | null
    created_at?: Date | string | null
    goals?: goalsUncheckedCreateNestedManyWithoutUsersInput
    healthconditions?: healthconditionsUncheckedCreateNestedManyWithoutUsersInput
    recommendations?: recommendationsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutUsermetricsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutUsermetricsInput, usersUncheckedCreateWithoutUsermetricsInput>
  }

  export type usersUpsertWithoutUsermetricsInput = {
    update: XOR<usersUpdateWithoutUsermetricsInput, usersUncheckedUpdateWithoutUsermetricsInput>
    create: XOR<usersCreateWithoutUsermetricsInput, usersUncheckedCreateWithoutUsermetricsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutUsermetricsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutUsermetricsInput, usersUncheckedUpdateWithoutUsermetricsInput>
  }

  export type usersUpdateWithoutUsermetricsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password_hash?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    goals?: goalsUpdateManyWithoutUsersNestedInput
    healthconditions?: healthconditionsUpdateManyWithoutUsersNestedInput
    recommendations?: recommendationsUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutUsermetricsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password_hash?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    goals?: goalsUncheckedUpdateManyWithoutUsersNestedInput
    healthconditions?: healthconditionsUncheckedUpdateManyWithoutUsersNestedInput
    recommendations?: recommendationsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type goalsCreateWithoutUsersInput = {
    goal_type?: string | null
    target_weight?: Decimal | DecimalJsLike | number | string | null
    target_date?: Date | string | null
    created_at?: Date | string | null
  }

  export type goalsUncheckedCreateWithoutUsersInput = {
    goal_id?: number
    goal_type?: string | null
    target_weight?: Decimal | DecimalJsLike | number | string | null
    target_date?: Date | string | null
    created_at?: Date | string | null
  }

  export type goalsCreateOrConnectWithoutUsersInput = {
    where: goalsWhereUniqueInput
    create: XOR<goalsCreateWithoutUsersInput, goalsUncheckedCreateWithoutUsersInput>
  }

  export type goalsCreateManyUsersInputEnvelope = {
    data: goalsCreateManyUsersInput | goalsCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type healthconditionsCreateWithoutUsersInput = {
    condition_name?: string | null
    severity?: string | null
    diagnosed_at?: Date | string | null
  }

  export type healthconditionsUncheckedCreateWithoutUsersInput = {
    condition_id?: number
    condition_name?: string | null
    severity?: string | null
    diagnosed_at?: Date | string | null
  }

  export type healthconditionsCreateOrConnectWithoutUsersInput = {
    where: healthconditionsWhereUniqueInput
    create: XOR<healthconditionsCreateWithoutUsersInput, healthconditionsUncheckedCreateWithoutUsersInput>
  }

  export type healthconditionsCreateManyUsersInputEnvelope = {
    data: healthconditionsCreateManyUsersInput | healthconditionsCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type recommendationsCreateWithoutUsersInput = {
    rec_type?: string | null
    description?: string | null
    calories?: number | null
    created_at?: Date | string | null
  }

  export type recommendationsUncheckedCreateWithoutUsersInput = {
    rec_id?: number
    rec_type?: string | null
    description?: string | null
    calories?: number | null
    created_at?: Date | string | null
  }

  export type recommendationsCreateOrConnectWithoutUsersInput = {
    where: recommendationsWhereUniqueInput
    create: XOR<recommendationsCreateWithoutUsersInput, recommendationsUncheckedCreateWithoutUsersInput>
  }

  export type recommendationsCreateManyUsersInputEnvelope = {
    data: recommendationsCreateManyUsersInput | recommendationsCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type usermetricsCreateWithoutUsersInput = {
    weight?: Decimal | DecimalJsLike | number | string | null
    height?: Decimal | DecimalJsLike | number | string | null
    bmi?: Decimal | DecimalJsLike | number | string | null
    recorded_at?: Date | string | null
  }

  export type usermetricsUncheckedCreateWithoutUsersInput = {
    metric_id?: number
    weight?: Decimal | DecimalJsLike | number | string | null
    height?: Decimal | DecimalJsLike | number | string | null
    bmi?: Decimal | DecimalJsLike | number | string | null
    recorded_at?: Date | string | null
  }

  export type usermetricsCreateOrConnectWithoutUsersInput = {
    where: usermetricsWhereUniqueInput
    create: XOR<usermetricsCreateWithoutUsersInput, usermetricsUncheckedCreateWithoutUsersInput>
  }

  export type usermetricsCreateManyUsersInputEnvelope = {
    data: usermetricsCreateManyUsersInput | usermetricsCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type goalsUpsertWithWhereUniqueWithoutUsersInput = {
    where: goalsWhereUniqueInput
    update: XOR<goalsUpdateWithoutUsersInput, goalsUncheckedUpdateWithoutUsersInput>
    create: XOR<goalsCreateWithoutUsersInput, goalsUncheckedCreateWithoutUsersInput>
  }

  export type goalsUpdateWithWhereUniqueWithoutUsersInput = {
    where: goalsWhereUniqueInput
    data: XOR<goalsUpdateWithoutUsersInput, goalsUncheckedUpdateWithoutUsersInput>
  }

  export type goalsUpdateManyWithWhereWithoutUsersInput = {
    where: goalsScalarWhereInput
    data: XOR<goalsUpdateManyMutationInput, goalsUncheckedUpdateManyWithoutUsersInput>
  }

  export type goalsScalarWhereInput = {
    AND?: goalsScalarWhereInput | goalsScalarWhereInput[]
    OR?: goalsScalarWhereInput[]
    NOT?: goalsScalarWhereInput | goalsScalarWhereInput[]
    goal_id?: IntFilter<"goals"> | number
    user_id?: IntNullableFilter<"goals"> | number | null
    goal_type?: StringNullableFilter<"goals"> | string | null
    target_weight?: DecimalNullableFilter<"goals"> | Decimal | DecimalJsLike | number | string | null
    target_date?: DateTimeNullableFilter<"goals"> | Date | string | null
    created_at?: DateTimeNullableFilter<"goals"> | Date | string | null
  }

  export type healthconditionsUpsertWithWhereUniqueWithoutUsersInput = {
    where: healthconditionsWhereUniqueInput
    update: XOR<healthconditionsUpdateWithoutUsersInput, healthconditionsUncheckedUpdateWithoutUsersInput>
    create: XOR<healthconditionsCreateWithoutUsersInput, healthconditionsUncheckedCreateWithoutUsersInput>
  }

  export type healthconditionsUpdateWithWhereUniqueWithoutUsersInput = {
    where: healthconditionsWhereUniqueInput
    data: XOR<healthconditionsUpdateWithoutUsersInput, healthconditionsUncheckedUpdateWithoutUsersInput>
  }

  export type healthconditionsUpdateManyWithWhereWithoutUsersInput = {
    where: healthconditionsScalarWhereInput
    data: XOR<healthconditionsUpdateManyMutationInput, healthconditionsUncheckedUpdateManyWithoutUsersInput>
  }

  export type healthconditionsScalarWhereInput = {
    AND?: healthconditionsScalarWhereInput | healthconditionsScalarWhereInput[]
    OR?: healthconditionsScalarWhereInput[]
    NOT?: healthconditionsScalarWhereInput | healthconditionsScalarWhereInput[]
    condition_id?: IntFilter<"healthconditions"> | number
    user_id?: IntNullableFilter<"healthconditions"> | number | null
    condition_name?: StringNullableFilter<"healthconditions"> | string | null
    severity?: StringNullableFilter<"healthconditions"> | string | null
    diagnosed_at?: DateTimeNullableFilter<"healthconditions"> | Date | string | null
  }

  export type recommendationsUpsertWithWhereUniqueWithoutUsersInput = {
    where: recommendationsWhereUniqueInput
    update: XOR<recommendationsUpdateWithoutUsersInput, recommendationsUncheckedUpdateWithoutUsersInput>
    create: XOR<recommendationsCreateWithoutUsersInput, recommendationsUncheckedCreateWithoutUsersInput>
  }

  export type recommendationsUpdateWithWhereUniqueWithoutUsersInput = {
    where: recommendationsWhereUniqueInput
    data: XOR<recommendationsUpdateWithoutUsersInput, recommendationsUncheckedUpdateWithoutUsersInput>
  }

  export type recommendationsUpdateManyWithWhereWithoutUsersInput = {
    where: recommendationsScalarWhereInput
    data: XOR<recommendationsUpdateManyMutationInput, recommendationsUncheckedUpdateManyWithoutUsersInput>
  }

  export type recommendationsScalarWhereInput = {
    AND?: recommendationsScalarWhereInput | recommendationsScalarWhereInput[]
    OR?: recommendationsScalarWhereInput[]
    NOT?: recommendationsScalarWhereInput | recommendationsScalarWhereInput[]
    rec_id?: IntFilter<"recommendations"> | number
    user_id?: IntNullableFilter<"recommendations"> | number | null
    rec_type?: StringNullableFilter<"recommendations"> | string | null
    description?: StringNullableFilter<"recommendations"> | string | null
    calories?: IntNullableFilter<"recommendations"> | number | null
    created_at?: DateTimeNullableFilter<"recommendations"> | Date | string | null
  }

  export type usermetricsUpsertWithWhereUniqueWithoutUsersInput = {
    where: usermetricsWhereUniqueInput
    update: XOR<usermetricsUpdateWithoutUsersInput, usermetricsUncheckedUpdateWithoutUsersInput>
    create: XOR<usermetricsCreateWithoutUsersInput, usermetricsUncheckedCreateWithoutUsersInput>
  }

  export type usermetricsUpdateWithWhereUniqueWithoutUsersInput = {
    where: usermetricsWhereUniqueInput
    data: XOR<usermetricsUpdateWithoutUsersInput, usermetricsUncheckedUpdateWithoutUsersInput>
  }

  export type usermetricsUpdateManyWithWhereWithoutUsersInput = {
    where: usermetricsScalarWhereInput
    data: XOR<usermetricsUpdateManyMutationInput, usermetricsUncheckedUpdateManyWithoutUsersInput>
  }

  export type usermetricsScalarWhereInput = {
    AND?: usermetricsScalarWhereInput | usermetricsScalarWhereInput[]
    OR?: usermetricsScalarWhereInput[]
    NOT?: usermetricsScalarWhereInput | usermetricsScalarWhereInput[]
    metric_id?: IntFilter<"usermetrics"> | number
    user_id?: IntNullableFilter<"usermetrics"> | number | null
    weight?: DecimalNullableFilter<"usermetrics"> | Decimal | DecimalJsLike | number | string | null
    height?: DecimalNullableFilter<"usermetrics"> | Decimal | DecimalJsLike | number | string | null
    bmi?: DecimalNullableFilter<"usermetrics"> | Decimal | DecimalJsLike | number | string | null
    recorded_at?: DateTimeNullableFilter<"usermetrics"> | Date | string | null
  }

  export type goalsCreateManyUsersInput = {
    goal_id?: number
    goal_type?: string | null
    target_weight?: Decimal | DecimalJsLike | number | string | null
    target_date?: Date | string | null
    created_at?: Date | string | null
  }

  export type healthconditionsCreateManyUsersInput = {
    condition_id?: number
    condition_name?: string | null
    severity?: string | null
    diagnosed_at?: Date | string | null
  }

  export type recommendationsCreateManyUsersInput = {
    rec_id?: number
    rec_type?: string | null
    description?: string | null
    calories?: number | null
    created_at?: Date | string | null
  }

  export type usermetricsCreateManyUsersInput = {
    metric_id?: number
    weight?: Decimal | DecimalJsLike | number | string | null
    height?: Decimal | DecimalJsLike | number | string | null
    bmi?: Decimal | DecimalJsLike | number | string | null
    recorded_at?: Date | string | null
  }

  export type goalsUpdateWithoutUsersInput = {
    goal_type?: NullableStringFieldUpdateOperationsInput | string | null
    target_weight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    target_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type goalsUncheckedUpdateWithoutUsersInput = {
    goal_id?: IntFieldUpdateOperationsInput | number
    goal_type?: NullableStringFieldUpdateOperationsInput | string | null
    target_weight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    target_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type goalsUncheckedUpdateManyWithoutUsersInput = {
    goal_id?: IntFieldUpdateOperationsInput | number
    goal_type?: NullableStringFieldUpdateOperationsInput | string | null
    target_weight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    target_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type healthconditionsUpdateWithoutUsersInput = {
    condition_name?: NullableStringFieldUpdateOperationsInput | string | null
    severity?: NullableStringFieldUpdateOperationsInput | string | null
    diagnosed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type healthconditionsUncheckedUpdateWithoutUsersInput = {
    condition_id?: IntFieldUpdateOperationsInput | number
    condition_name?: NullableStringFieldUpdateOperationsInput | string | null
    severity?: NullableStringFieldUpdateOperationsInput | string | null
    diagnosed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type healthconditionsUncheckedUpdateManyWithoutUsersInput = {
    condition_id?: IntFieldUpdateOperationsInput | number
    condition_name?: NullableStringFieldUpdateOperationsInput | string | null
    severity?: NullableStringFieldUpdateOperationsInput | string | null
    diagnosed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type recommendationsUpdateWithoutUsersInput = {
    rec_type?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    calories?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type recommendationsUncheckedUpdateWithoutUsersInput = {
    rec_id?: IntFieldUpdateOperationsInput | number
    rec_type?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    calories?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type recommendationsUncheckedUpdateManyWithoutUsersInput = {
    rec_id?: IntFieldUpdateOperationsInput | number
    rec_type?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    calories?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usermetricsUpdateWithoutUsersInput = {
    weight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    height?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    bmi?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    recorded_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usermetricsUncheckedUpdateWithoutUsersInput = {
    metric_id?: IntFieldUpdateOperationsInput | number
    weight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    height?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    bmi?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    recorded_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usermetricsUncheckedUpdateManyWithoutUsersInput = {
    metric_id?: IntFieldUpdateOperationsInput | number
    weight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    height?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    bmi?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    recorded_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}